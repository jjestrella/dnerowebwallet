{"ast":null,"code":"import React from'react';import{useForm}from'react-hook-form';import{ethers}from'ethers';import*as dnerojs from'@dnerolabs/dnero-js';import FormField from'../FormField';import{StakePurposeForDDROP}from'../../constants';import{formatDNC20TokenAmountToLargestUnit}from'../../utils/Utils';import _ from'lodash';import BigNumber from'bignumber.js';import{DDropAsset}from'../../constants/assets';export default function WithdrawStakeTxForm(props){var onSubmit=props.onSubmit,defaultValues=props.defaultValues,formRef=props.formRef,selectedAccount=props.selectedAccount,assets=props.assets,chainId=props.chainId;var _useForm=useForm({mode:'onChange',defaultValues:defaultValues||{purpose:dnerojs.constants.StakePurpose.StakeForSentry,holder:'',amount:''}}),register=_useForm.register,handleSubmit=_useForm.handleSubmit,errors=_useForm.errors,watch=_useForm.watch,setValue=_useForm.setValue;var purpose=parseInt(watch('purpose'));var amount=watch('amount');var renderEstDDROPToReturn=function renderEstDDROPToReturn(){var percentageToUnstake=Math.min(parseFloat(amount),100.0)/100;var dnc20stakes=_.get(selectedAccount,['dnc20Stakes'],{});var balanceStr=_.get(dnc20stakes,'ddrop.estimatedTokenOwnedWithRewards','0');var balanceBN=new BigNumber(balanceStr);var amountBN=balanceBN.multipliedBy(percentageToUnstake);var formattedAmt=formatDNC20TokenAmountToLargestUnit(amountBN.toString(),DDropAsset(chainId).decimals);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",{className:'Balance__amount-title'},\"Estimated DDROP Returned: \"),/*#__PURE__*/React.createElement(\"span\",{className:'Balance__amount-value'},formattedAmt));};return/*#__PURE__*/React.createElement(\"form\",{className:'TxForm TxForm--WithdrawStake',onSubmit:handleSubmit(onSubmit),ref:formRef},/*#__PURE__*/React.createElement(FormField,{title:'Stake Type',error:errors.purpose&&'Stake type is required'},/*#__PURE__*/React.createElement(\"select\",{className:'RoundedInput',name:'purpose',ref:register({required:true})},/*#__PURE__*/React.createElement(\"option\",{key:'__placeholder__',value:'',disabled:true},\"Select stake type\"),/*#__PURE__*/React.createElement(\"option\",{key:'sentry',value:dnerojs.constants.StakePurpose.StakeForSentry},\"Sentry Node\"),/*#__PURE__*/React.createElement(\"option\",{key:'validator',value:dnerojs.constants.StakePurpose.StakeForValidator},\"Validator Node\"),/*#__PURE__*/React.createElement(\"option\",{key:'validator',value:dnerojs.constants.StakePurpose.StakeForEliteEdge},\"Edge Node\"),DDropAsset(chainId)&&/*#__PURE__*/React.createElement(\"option\",{key:'ddrop',value:StakePurposeForDDROP},\"DDROP\"))),purpose!==StakePurposeForDDROP&&/*#__PURE__*/React.createElement(FormField,{title:'Holder',error:errors.holder&&'A valid node address is required'},/*#__PURE__*/React.createElement(\"input\",{name:\"holder\",className:'RoundedInput',placeholder:'Enter node address',ref:register({required:true,validate:function validate(s){return ethers.utils.isAddress(s);}})})),purpose===StakePurposeForDDROP&&/*#__PURE__*/React.createElement(FormField,{title:'% Amount to Unstake',error:errors.amount&&errors.amount.message},/*#__PURE__*/React.createElement(\"input\",{name:\"amount\",className:'RoundedInput',placeholder:'Enter % amount to unstake',ref:register({required:{value:true,message:'Unstake % amount is required'},validate:{moreThanZero:function moreThanZero(s){var f=parseFloat(s);return f>0?true:'Invalid % amount.';},lessThanOrEqualTo100:function lessThanOrEqualTo100(s){var f=parseFloat(s);return f<=100.0?true:'Invalid % amount. Max 100%.';}}})})),purpose===StakePurposeForDDROP&&!_.isEmpty(amount)&&renderEstDDROPToReturn());}","map":{"version":3,"names":["React","useForm","ethers","dnerojs","FormField","StakePurposeForDDROP","formatDNC20TokenAmountToLargestUnit","_","BigNumber","DDropAsset","WithdrawStakeTxForm","props","onSubmit","defaultValues","formRef","selectedAccount","assets","chainId","mode","purpose","constants","StakePurpose","StakeForSentry","holder","amount","register","handleSubmit","errors","watch","setValue","parseInt","renderEstDDROPToReturn","percentageToUnstake","Math","min","parseFloat","dnc20stakes","get","balanceStr","balanceBN","amountBN","multipliedBy","formattedAmt","toString","decimals","required","StakeForValidator","StakeForEliteEdge","validate","s","utils","isAddress","message","value","moreThanZero","f","lessThanOrEqualTo100","isEmpty"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/WithdrawStakeTxForm.js"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport FormField from '../FormField';\nimport {StakePurposeForDDROP} from '../../constants';\nimport {formatDNC20TokenAmountToLargestUnit} from '../../utils/Utils';\nimport _ from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport {DDropAsset} from '../../constants/assets';\n\nexport default function WithdrawStakeTxForm(props){\n    const {onSubmit, defaultValues, formRef, selectedAccount, assets, chainId} = props;\n    const {register, handleSubmit, errors, watch, setValue} = useForm({\n        mode: 'onChange',\n        defaultValues: defaultValues || {\n            purpose: dnerojs.constants.StakePurpose.StakeForSentry,\n            holder: '',\n            amount: ''\n        }\n    });\n    const purpose = parseInt(watch('purpose'));\n    const amount = watch('amount');\n\n\n    const renderEstDDROPToReturn = () => {\n        const percentageToUnstake = Math.min(parseFloat(amount), 100.0) / 100;\n        const dnc20stakes = _.get(selectedAccount, ['dnc20Stakes'], {});\n        const balanceStr = _.get(dnc20stakes, 'ddrop.estimatedTokenOwnedWithRewards', '0');\n        const balanceBN = new BigNumber(balanceStr);\n        const amountBN = balanceBN.multipliedBy(percentageToUnstake);\n        const formattedAmt = formatDNC20TokenAmountToLargestUnit(amountBN.toString(), DDropAsset(chainId).decimals);\n\n        return (\n            <div>\n                <span className={'Balance__amount-title'}>Estimated DDROP Returned: </span><span className={'Balance__amount-value'}>{formattedAmt}</span>\n            </div>\n        );\n    };\n\n    return (\n        <form className={'TxForm TxForm--WithdrawStake'}\n              onSubmit={handleSubmit(onSubmit)}\n              ref={formRef}\n        >\n            <FormField title={'Stake Type'}\n                       error={errors.purpose && 'Stake type is required'}\n            >\n                <select\n                    className={'RoundedInput'}\n                    name={'purpose'}\n                    ref={register({ required: true })}\n                >\n                    <option key={'__placeholder__'}\n                            value={''}\n                            disabled>\n                        Select stake type\n                    </option>\n                    <option key={'sentry'}\n                            value={dnerojs.constants.StakePurpose.StakeForSentry}>\n                        Sentry Node\n                    </option>\n                    <option key={'validator'}\n                            value={dnerojs.constants.StakePurpose.StakeForValidator}>\n                        Validator Node\n                    </option>\n                    <option key={'validator'}\n                            value={dnerojs.constants.StakePurpose.StakeForEliteEdge}>\n                        Edge Node\n                    </option>\n                    {\n                        DDropAsset(chainId) &&\n                        <option key={'ddrop'}\n                                value={StakePurposeForDDROP}>\n                            DDROP\n                        </option>\n                    }\n\n                </select>\n            </FormField>\n\n            {\n                purpose !== StakePurposeForDDROP &&\n                <FormField title={'Holder'}\n                           error={errors.holder && 'A valid node address is required'}\n                >\n                    <input name=\"holder\"\n                           className={'RoundedInput'}\n                           placeholder={'Enter node address'}\n                           ref={register({\n                               required: true,\n                               validate: (s) => ethers.utils.isAddress(s)\n                           })} />\n                </FormField>\n            }\n\n            {\n                purpose === StakePurposeForDDROP &&\n                <FormField title={'% Amount to Unstake'}\n                           error={errors.amount && errors.amount.message}\n                >\n                    <input name=\"amount\"\n                           className={'RoundedInput'}\n                           placeholder={'Enter % amount to unstake'}\n                           ref={register({\n                               required: {\n                                   value: true,\n                                   message: 'Unstake % amount is required'\n                               },\n                               validate: {\n                                   moreThanZero: (s) => {\n                                       const f = parseFloat(s);\n\n                                       return (f > 0) ? true : 'Invalid % amount.';\n                                   },\n                                   lessThanOrEqualTo100: (s) => {\n                                       const f = parseFloat(s);\n\n                                       return (f <= 100.0) ? true : 'Invalid % amount. Max 100%.';\n                                   }\n                               }\n                           })} />\n                </FormField>\n            }\n            {\n                (purpose === StakePurposeForDDROP && !_.isEmpty(amount)) &&\n                renderEstDDROPToReturn()\n            }\n        </form>\n    );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}