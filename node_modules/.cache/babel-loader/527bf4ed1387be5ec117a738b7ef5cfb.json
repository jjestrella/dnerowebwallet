{"ast":null,"code":"import _defineProperty from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";function _regeneratorRuntime(){\"use strict\";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function _regeneratorRuntime(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol=\"function\"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||\"@@iterator\",asyncIteratorSymbol=$Symbol.asyncIterator||\"@@asyncIterator\",toStringTagSymbol=$Symbol.toStringTag||\"@@toStringTag\";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},\"\");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function(innerFn,self,context){var state=\"suspendedStart\";return function(method,arg){if(\"executing\"===state)throw new Error(\"Generator is already running\");if(\"completed\"===state){if(\"throw\"===method)throw arg;return doneResult();}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if(\"next\"===context.method)context.sent=context._sent=context.arg;else if(\"throw\"===context.method){if(\"suspendedStart\"===state)throw state=\"completed\",context.arg;context.dispatchException(context.arg);}else\"return\"===context.method&&context.abrupt(\"return\",context.arg);state=\"executing\";var record=tryCatch(innerFn,self,context);if(\"normal\"===record.type){if(state=context.done?\"completed\":\"suspendedYield\",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}\"throw\"===record.type&&(state=\"completed\",context.method=\"throw\",context.arg=record.arg);}};}(innerFn,self,context),generator;}function tryCatch(fn,obj,arg){try{return{type:\"normal\",arg:fn.call(obj,arg)};}catch(err){return{type:\"throw\",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){[\"next\",\"throw\",\"return\"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if(\"throw\"!==record.type){var result=record.arg,value=result.value;return value&&\"object\"==typeof value&&hasOwn.call(value,\"__await\")?PromiseImpl.resolve(value.__await).then(function(value){invoke(\"next\",value,resolve,reject);},function(err){invoke(\"throw\",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke(\"throw\",error,resolve,reject);});}reject(record.arg);}var previousPromise;this._invoke=function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();};}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(undefined===method){if(context.delegate=null,\"throw\"===context.method){if(delegate.iterator.return&&(context.method=\"return\",context.arg=undefined,maybeInvokeDelegate(delegate,context),\"throw\"===context.method))return ContinueSentinel;context.method=\"throw\",context.arg=new TypeError(\"The iterator does not provide a 'throw' method\");}return ContinueSentinel;}var record=tryCatch(method,delegate.iterator,context.arg);if(\"throw\"===record.type)return context.method=\"throw\",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,\"return\"!==context.method&&(context.method=\"next\",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method=\"throw\",context.arg=new TypeError(\"iterator result is not an object\"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type=\"normal\",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:\"root\"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if(\"function\"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;){if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;}return next.value=undefined,next.done=!0,next;};return next.next=next;}}return{next:doneResult};}function doneResult(){return{value:undefined,done:!0};}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(Gp,\"constructor\",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,\"constructor\",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,\"GeneratorFunction\"),exports.isGeneratorFunction=function(genFun){var ctor=\"function\"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||\"GeneratorFunction\"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,\"GeneratorFunction\")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,\"Generator\"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,\"toString\",function(){return\"[object Generator]\";}),exports.keys=function(object){var keys=[];for(var key in object){keys.push(key);}return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this){\"t\"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);}},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if(\"throw\"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type=\"throw\",record.arg=exception,context.next=loc,caught&&(context.method=\"next\",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if(\"root\"===entry.tryLoc)return handle(\"end\");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,\"catchLoc\"),hasFinally=hasOwn.call(entry,\"finallyLoc\");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error(\"try statement without catch or finally\");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,\"finallyLoc\")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&(\"break\"===type||\"continue\"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method=\"next\",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if(\"throw\"===record.type)throw record.arg;return\"break\"===record.type||\"continue\"===record.type?this.next=record.arg:\"return\"===record.type?(this.rval=this.arg=record.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if(\"throw\"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error(\"illegal catch attempt\");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},\"next\"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}import _ from'lodash';import*as dnerojs from'@dnerolabs/dnero-js';import BigNumber from'bignumber.js';import ObservableStore from'../utils/ObservableStore';import{SingleCallTokenBalancesAddressByChainId,DDropStakingAddressByChainId}from'../constants';import{SingleCallTokenBalancesABI,DDropStakingABI}from'../constants/contracts';var _require=require('@dnerolabs/dnc20-contract-metadata'),tokensByChainId=_require.tokensByChainId;var DEFAULT_INTERVAL=60*1000;/**\n * This module is responsible for tracking any number of accounts and caching their current balances & transaction\n * counts.\n *\n * It also tracks transaction hashes, and checks their inclusion status on each new block.\n *\n * @typedef {Object} AccountManager\n * @property {Object} store The stored object containing all accounts to track\n * @property {Object} store.accounts The accounts currently stored in this AccountTracker\n *\n */var AccountManager=/*#__PURE__*/function(){/**\n     * @param {Object} opts - Options for initializing the controller\n     */function AccountManager(){var opts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,AccountManager);var initState={accounts:{}};this.store=new ObservableStore(initState);this._getProvider=opts.getProvider;this._getNetwork=opts.getNetwork;this._getTokens=opts.getTokens;this._preferencesController=opts.preferencesController;this._updateIntervalId=null;}_createClass(AccountManager,[{key:\"start\",value:function start(){var _this=this;// fetch account balances\nthis.updateAccounts();if(!this._updateIntervalId){this._updateIntervalId=setInterval(function(){_this.updateAccounts();},DEFAULT_INTERVAL);}this.detectNewTokens();}},{key:\"stop\",value:function stop(){if(this._updateIntervalId){clearInterval(this._updateIntervalId);}}/**\n     * Ensures that the locally stored accounts are in sync with a set of accounts stored externally to this\n     * AccountTracker.\n     *\n     * Once this AccountTracker's accounts are up to date with those referenced by the passed addresses, each\n     * of these accounts are given an updated balance via EthQuery.\n     *\n     * @param {Array} addresses - The array of hex addresses for accounts with which this AccountTracker's accounts should be\n     * in sync\n     *\n     */},{key:\"syncAddresses\",value:function syncAddresses(addresses){var _this$store$getState=this.store.getState(),accounts=_this$store$getState.accounts;var locals=Object.keys(accounts);var accountsToAdd=[];addresses.forEach(function(addr){if(!locals.includes(addr)){accountsToAdd.push(addr);}});var accountsToRemove=[];locals.forEach(function(local){if(!addresses.includes(local)){accountsToRemove.push(local);}});this.addAccounts(accountsToAdd);this.removeAccounts(accountsToRemove);}/**\n     * Adds new addresses to track the balances of\n     * given a balance as long this._currentBlockNumber is defined.\n     *\n     * @param {Array} addresses - An array of hex addresses of new accounts to track\n     *\n     */},{key:\"addAccounts\",value:function addAccounts(addresses){var _this$store$getState2=this.store.getState(),accounts=_this$store$getState2.accounts;// add initial state for addresses\naddresses.forEach(function(address){accounts[address]={};});// save accounts state\nthis.store.updateState({accounts:accounts});// fetch balances for the accounts that we added\nif(addresses.length){this.updateAccounts();}}/**\n     * Removes accounts from being tracked\n     *\n     * @param {Array} addresses - array of hex addresses to stop tracking\n     *\n     */},{key:\"removeAccounts\",value:function removeAccounts(addresses){var _this$store$getState3=this.store.getState(),accounts=_this$store$getState3.accounts;// remove each state object\naddresses.forEach(function(address){delete accounts[address];});// save accounts state\nthis.store.updateState({accounts:accounts});}/**\n     * Removes all addresses and associated balances\n     */},{key:\"clearAccounts\",value:function clearAccounts(){this.store.updateState({accounts:{}});}/**\n     * balanceChecker is deployed on main eth (test)nets and requires a single call\n     * for all other networks, calls this._updateAccount for each account in this.store\n     *\n     * @returns {Promise} after all account balances updated\n     *\n     */},{key:\"updateAccounts\",value:function(){var _updateAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _this2=this;var _this$store$getState4,accounts,addresses;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_this$store$getState4=this.store.getState(),accounts=_this$store$getState4.accounts;addresses=Object.keys(accounts);if(!(addresses.length===0)){_context.next=4;break;}return _context.abrupt(\"return\",true);case 4:addresses.map(function(addr){_this2._updateAccount(addr);});// Fetch tokens...\n_context.next=7;return this._updateAccountTokensViaBalanceChecker(addresses);case 7:case\"end\":return _context.stop();}}},_callee,this);}));function updateAccounts(){return _updateAccounts.apply(this,arguments);}return updateAccounts;}()/**\n     * Updates the current balance of an account.\n     *\n     * @private\n     * @param {string} address - A hex address of a the account to be updated\n     * @returns {Promise} after the account balance is updated\n     *\n     */},{key:\"_updateAccount\",value:function(){var _updateAccount2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address){var account,provider,result,_this$store$getState5,accounts,current;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// query balance\naccount=null;_context2.prev=1;provider=this._getProvider();_context2.next=5;return provider.getAccount(address);case 5:account=_context2.sent;_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](1);// This can happen if the account doesn't have any dnero/dtoken yet.\naccount={coins:{dnerowei:0,dtokenwei:0}};case 11:result={address:address,balances:account.coins};// update accounts state\n_this$store$getState5=this.store.getState(),accounts=_this$store$getState5.accounts;current=accounts[address.toLowerCase()]||accounts[address]||{};// only populate if the entry is still present\naccounts[address]=_objectSpread(_objectSpread(_objectSpread({},current),result),{},{balances:_objectSpread(_objectSpread({},current.balances),result.balances)});this.store.updateState({accounts:accounts});case 16:case\"end\":return _context2.stop();}}},_callee2,this,[[1,8]]);}));function _updateAccount(_x){return _updateAccount2.apply(this,arguments);}return _updateAccount;}()/**\n     * Updates current address balances from balanceChecker deployed contract instance\n     * @param {*} addresses\n     * @param {*} deployedContractAddress\n     */},{key:\"_updateAccountTokensViaBalanceChecker\",value:function(){var _updateAccountTokensViaBalanceChecker2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(addresses){var _this3=this;var _this$store$getState6,accounts,provider,chainId,tokens,tokenAddresses,deployedContractAddress,balanceCheckContract,balances,balancesGroupedByAddress;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_this$store$getState6=this.store.getState(),accounts=_this$store$getState6.accounts;provider=this._getProvider();chainId=this._getNetwork().chainId;tokens=this._getTokens();tokenAddresses=_.map(tokens,'address');tokenAddresses=_.map(tokenAddresses,_.trim);deployedContractAddress=SingleCallTokenBalancesAddressByChainId[chainId];if(!_.isNil(deployedContractAddress)){_context3.next=9;break;}return _context3.abrupt(\"return\");case 9:if(!(tokenAddresses.length===0)){_context3.next=11;break;}return _context3.abrupt(\"return\");case 11:if(!(addresses.length===0)){_context3.next=13;break;}return _context3.abrupt(\"return\");case 13:_context3.prev=13;balanceCheckContract=new dnerojs.Contract(deployedContractAddress,SingleCallTokenBalancesABI,provider);_context3.next=17;return balanceCheckContract.balances(addresses,tokenAddresses);case 17:balances=_context3.sent;// contract returns a array of length addresses.length * tokens.length so we need to partiton it\nbalancesGroupedByAddress=_.chunk(balances,tokenAddresses.length);addresses.forEach(function(address,index){var addressTokenBalances=balancesGroupedByAddress[index];var tokenBalancesByTokenAddress=_.reduce(addressTokenBalances,function(current,balance,tokenIdx){var tokenAddress=tokenAddresses[tokenIdx];return Object.assign(current,_defineProperty({},tokenAddress,balance.toString()));},{});var currentAccounts=_this3.store.getState().accounts;var currentBalances=currentAccounts[address].balances;var current=accounts[address.toLowerCase()]||accounts[address];accounts[address]=_objectSpread(_objectSpread({},current),{},{address:address,balances:_objectSpread(_objectSpread({},currentBalances),tokenBalancesByTokenAddress)});});this.store.updateState({accounts:accounts});_context3.next=25;break;case 23:_context3.prev=23;_context3.t0=_context3[\"catch\"](13);case 25:case\"end\":return _context3.stop();}}},_callee3,this,[[13,23]]);}));function _updateAccountTokensViaBalanceChecker(_x2){return _updateAccountTokensViaBalanceChecker2.apply(this,arguments);}return _updateAccountTokensViaBalanceChecker;}()},{key:\"updateAccountDDropStake\",value:function(){var _updateAccountDDropStake=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address){var stakingBalance,totalShares,estimatedDDropOwned,delegate,provider,network,chainId,deployedContractAddress,ddropStakingContract,_this$store$getState7,accounts,current,votingPower,ddropStakingInfo;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:stakingBalance=new BigNumber(0);totalShares=new BigNumber(0);estimatedDDropOwned=new BigNumber(0);delegate=null;_context4.prev=4;provider=this._getProvider();network=this._getNetwork();chainId=network.chainId;deployedContractAddress=DDropStakingAddressByChainId[chainId];if(!_.isNil(deployedContractAddress)){_context4.next=11;break;}return _context4.abrupt(\"return\",null);case 11:ddropStakingContract=new dnerojs.Contract(deployedContractAddress,DDropStakingABI,provider);_context4.next=14;return ddropStakingContract.balanceOf(address);case 14:stakingBalance=_context4.sent;if(stakingBalance.isZero()){_context4.next=25;break;}_context4.next=18;return ddropStakingContract.estimatedDDropOwnedBy(address);case 18:estimatedDDropOwned=_context4.sent;_context4.next=21;return ddropStakingContract.totalShares();case 21:totalShares=_context4.sent;_context4.next=24;return ddropStakingContract.delegates(address);case 24:delegate=_context4.sent;case 25:_context4.next=30;break;case 27:_context4.prev=27;_context4.t0=_context4[\"catch\"](4);return _context4.abrupt(\"return\",null);case 30:// update accounts state\n_this$store$getState7=this.store.getState(),accounts=_this$store$getState7.accounts;current=accounts[address.toLowerCase()]||accounts[address];// only populate if the entry is still present\nif(current){_context4.next=34;break;}return _context4.abrupt(\"return\",null);case 34:votingPower=new BigNumber(stakingBalance.toString()).dividedBy(new BigNumber(totalShares.toString())).multipliedBy(100);ddropStakingInfo={balance:stakingBalance.toString(),totalShares:totalShares.toString(),estimatedTokenOwnedWithRewards:estimatedDDropOwned.toString(),votingPower:stakingBalance.isZero()?\"0\":votingPower.toString(),votingDelegate:delegate};accounts[address]=_objectSpread(_objectSpread({},current),{},{dnc20Stakes:{ddrop:ddropStakingInfo}});this.store.updateState({accounts:accounts});return _context4.abrupt(\"return\",ddropStakingInfo);case 39:case\"end\":return _context4.stop();}}},_callee4,this,[[4,27]]);}));function updateAccountDDropStake(_x3){return _updateAccountDDropStake.apply(this,arguments);}return updateAccountDDropStake;}()},{key:\"updateAccountStakes\",value:function(){var _updateAccountStakes=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(address){var stakes,network,chainId,explorerUrl,explorerApiUrl,listStakesUrl,response,responseJson,_this$store$getState8,accounts,current;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:stakes=null;_context5.prev=1;network=this._getNetwork();chainId=network.chainId;explorerUrl=dnerojs.networks.getExplorerUrlForChainId(chainId);explorerApiUrl=\"\".concat(explorerUrl,\":8443/api\");listStakesUrl=\"\".concat(explorerApiUrl,\"/stake/\").concat(address,\"?hasBalance=true&types[]=vcp&types[]=gcp&types[]=eenp\");_context5.next=9;return fetch(listStakesUrl);case 9:response=_context5.sent;_context5.next=12;return response.json();case 12:responseJson=_context5.sent;stakes=_.get(responseJson,['body','sourceRecords'],[]);_context5.next=19;break;case 16:_context5.prev=16;_context5.t0=_context5[\"catch\"](1);return _context5.abrupt(\"return\",[]);case 19:// update accounts state\n_this$store$getState8=this.store.getState(),accounts=_this$store$getState8.accounts;current=accounts[address.toLowerCase()]||accounts[address];// only populate if the entry is still present\nif(current){_context5.next=23;break;}return _context5.abrupt(\"return\",[]);case 23:accounts[address]=_objectSpread(_objectSpread({},current),{},{stakes:stakes});this.store.updateState({accounts:accounts});// DNC20 stakes\n_context5.next=27;return this.updateAccountDDropStake(address);case 27:return _context5.abrupt(\"return\",stakes);case 28:case\"end\":return _context5.stop();}}},_callee5,this,[[1,16]]);}));function updateAccountStakes(_x4){return _updateAccountStakes.apply(this,arguments);}return updateAccountStakes;}()},{key:\"detectNewTokens\",value:function(){var _detectNewTokens=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(){var _this4=this;var selectedAddress,provider,network,chainId,knownTokenList,tokens,tokenAddresses,trackedTokens,tokensToDetect,tokenAddress,sliceOfTokensToDetect,balanceCheckContract,_loop,_i,_sliceOfTokensToDetec,_ret;return _regeneratorRuntime().wrap(function _callee6$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:selectedAddress=this._preferencesController.getSelectedAddress();provider=this._getProvider();network=this._getNetwork();chainId=network.chainId;knownTokenList=tokensByChainId[chainId];tokens=this._getTokens();tokenAddresses=_.map(tokens,'address');trackedTokens=new Set(_.map(tokenAddresses,_.trim));tokensToDetect=[];for(tokenAddress in knownTokenList){if(!trackedTokens.has(tokenAddress)){tokensToDetect.push(tokenAddress);}}if(!(tokensToDetect.length===0)){_context7.next=12;break;}return _context7.abrupt(\"return\");case 12:sliceOfTokensToDetect=[tokensToDetect.slice(0,1000),tokensToDetect.slice(1000,tokensToDetect.length-1)];balanceCheckContract=new dnerojs.Contract(SingleCallTokenBalancesAddressByChainId[chainId],SingleCallTokenBalancesABI,provider);_loop=/*#__PURE__*/_regeneratorRuntime().mark(function _loop(){var tokensSlice,result,tokensWithBalance;return _regeneratorRuntime().wrap(function _loop$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:tokensSlice=_sliceOfTokensToDetec[_i];result=void 0;_context6.prev=2;_context6.next=5;return balanceCheckContract.balances([selectedAddress],tokensSlice);case 5:result=_context6.sent;_context6.next=11;break;case 8:_context6.prev=8;_context6.t0=_context6[\"catch\"](2);return _context6.abrupt(\"return\",{v:void 0});case 11:tokensWithBalance=tokensSlice.filter(function(_,index){var balance=result[index];return balance&&!balance.isZero();});_context6.next=14;return Promise.all(tokensWithBalance.map(function(tokenAddress){return _this4._preferencesController.addToken(tokenAddress,knownTokenList[tokenAddress].symbol,knownTokenList[tokenAddress].decimals);}));case 14:case\"end\":return _context6.stop();}}},_loop,null,[[2,8]]);});_i=0,_sliceOfTokensToDetec=sliceOfTokensToDetect;case 16:if(!(_i<_sliceOfTokensToDetec.length)){_context7.next=24;break;}return _context7.delegateYield(_loop(),\"t0\",18);case 18:_ret=_context7.t0;if(!(typeof _ret===\"object\")){_context7.next=21;break;}return _context7.abrupt(\"return\",_ret.v);case 21:_i++;_context7.next=16;break;case 24:case\"end\":return _context7.stop();}}},_callee6,this);}));function detectNewTokens(){return _detectNewTokens.apply(this,arguments);}return detectNewTokens;}()}]);return AccountManager;}();export{AccountManager as default};","map":{"version":3,"names":["_","dnerojs","BigNumber","ObservableStore","SingleCallTokenBalancesAddressByChainId","DDropStakingAddressByChainId","SingleCallTokenBalancesABI","DDropStakingABI","require","tokensByChainId","DEFAULT_INTERVAL","AccountManager","opts","initState","accounts","store","_getProvider","getProvider","_getNetwork","getNetwork","_getTokens","getTokens","_preferencesController","preferencesController","_updateIntervalId","updateAccounts","setInterval","detectNewTokens","clearInterval","addresses","getState","locals","Object","keys","accountsToAdd","forEach","addr","includes","push","accountsToRemove","local","addAccounts","removeAccounts","address","updateState","length","map","_updateAccount","_updateAccountTokensViaBalanceChecker","account","provider","getAccount","coins","dnerowei","dtokenwei","result","balances","current","toLowerCase","chainId","tokens","tokenAddresses","trim","deployedContractAddress","isNil","balanceCheckContract","Contract","balancesGroupedByAddress","chunk","index","addressTokenBalances","tokenBalancesByTokenAddress","reduce","balance","tokenIdx","tokenAddress","assign","toString","currentAccounts","currentBalances","stakingBalance","totalShares","estimatedDDropOwned","delegate","network","ddropStakingContract","balanceOf","isZero","estimatedDDropOwnedBy","delegates","votingPower","dividedBy","multipliedBy","ddropStakingInfo","estimatedTokenOwnedWithRewards","votingDelegate","dnc20Stakes","ddrop","stakes","explorerUrl","networks","getExplorerUrlForChainId","explorerApiUrl","listStakesUrl","fetch","response","json","responseJson","get","updateAccountDDropStake","selectedAddress","getSelectedAddress","knownTokenList","trackedTokens","Set","tokensToDetect","has","sliceOfTokensToDetect","slice","tokensSlice","tokensWithBalance","filter","Promise","all","addToken","symbol","decimals"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/controllers/account-manager.js"],"sourcesContent":["import _ from 'lodash';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport BigNumber from 'bignumber.js';\nimport ObservableStore from '../utils/ObservableStore';\nimport {SingleCallTokenBalancesAddressByChainId, DDropStakingAddressByChainId} from '../constants';\nimport {SingleCallTokenBalancesABI, DDropStakingABI} from '../constants/contracts';\n\nconst {tokensByChainId} = require('@dnerolabs/dnc20-contract-metadata');\nconst DEFAULT_INTERVAL = 60 * 1000;\n\n/**\n * This module is responsible for tracking any number of accounts and caching their current balances & transaction\n * counts.\n *\n * It also tracks transaction hashes, and checks their inclusion status on each new block.\n *\n * @typedef {Object} AccountManager\n * @property {Object} store The stored object containing all accounts to track\n * @property {Object} store.accounts The accounts currently stored in this AccountTracker\n *\n */\nexport default class AccountManager {\n    /**\n     * @param {Object} opts - Options for initializing the controller\n     */\n    constructor(opts = {}) {\n        const initState = {\n            accounts: {}\n        };\n        this.store = new ObservableStore(initState);\n        this._getProvider = opts.getProvider;\n        this._getNetwork = opts.getNetwork;\n        this._getTokens = opts.getTokens;\n        this._preferencesController = opts.preferencesController;\n        this._updateIntervalId = null;\n    }\n\n    start() {\n        // fetch account balances\n        this.updateAccounts();\n\n        if(!this._updateIntervalId){\n            this._updateIntervalId = setInterval(() => {\n                this.updateAccounts();\n            }, DEFAULT_INTERVAL);\n        }\n\n        this.detectNewTokens();\n    }\n\n    stop() {\n        if(this._updateIntervalId){\n            clearInterval(this._updateIntervalId);\n        }\n    }\n\n    /**\n     * Ensures that the locally stored accounts are in sync with a set of accounts stored externally to this\n     * AccountTracker.\n     *\n     * Once this AccountTracker's accounts are up to date with those referenced by the passed addresses, each\n     * of these accounts are given an updated balance via EthQuery.\n     *\n     * @param {Array} addresses - The array of hex addresses for accounts with which this AccountTracker's accounts should be\n     * in sync\n     *\n     */\n    syncAddresses(addresses) {\n        const { accounts } = this.store.getState();\n        const locals = Object.keys(accounts);\n\n        const accountsToAdd = [];\n        addresses.forEach((addr) => {\n            if (!locals.includes(addr)) {\n                accountsToAdd.push(addr);\n            }\n        });\n\n        const accountsToRemove = [];\n        locals.forEach((local) => {\n            if (!addresses.includes(local)) {\n                accountsToRemove.push(local);\n            }\n        });\n\n        this.addAccounts(accountsToAdd);\n        this.removeAccounts(accountsToRemove);\n    }\n\n    /**\n     * Adds new addresses to track the balances of\n     * given a balance as long this._currentBlockNumber is defined.\n     *\n     * @param {Array} addresses - An array of hex addresses of new accounts to track\n     *\n     */\n    addAccounts(addresses) {\n        const { accounts } = this.store.getState();\n        // add initial state for addresses\n        addresses.forEach((address) => {\n            accounts[address] = {};\n        });\n        // save accounts state\n        this.store.updateState({ accounts });\n\n        // fetch balances for the accounts that we added\n        if(addresses.length){\n            this.updateAccounts();\n        }\n    }\n\n    /**\n     * Removes accounts from being tracked\n     *\n     * @param {Array} addresses - array of hex addresses to stop tracking\n     *\n     */\n    removeAccounts(addresses) {\n        const { accounts } = this.store.getState();\n        // remove each state object\n        addresses.forEach((address) => {\n            delete accounts[address];\n        });\n        // save accounts state\n        this.store.updateState({ accounts });\n    }\n\n    /**\n     * Removes all addresses and associated balances\n     */\n\n    clearAccounts() {\n        this.store.updateState({ accounts: {} });\n    }\n\n    /**\n     * balanceChecker is deployed on main eth (test)nets and requires a single call\n     * for all other networks, calls this._updateAccount for each account in this.store\n     *\n     * @returns {Promise} after all account balances updated\n     *\n     */\n    async updateAccounts() {\n        const { accounts } = this.store.getState();\n        const addresses = Object.keys(accounts);\n\n        if(addresses.length === 0){\n            // No accounts to fetch\n            return true;\n        }\n\n        addresses.map((addr) => {\n            this._updateAccount(addr);\n        });\n\n        // Fetch tokens...\n        await this._updateAccountTokensViaBalanceChecker(addresses);\n    }\n\n    /**\n     * Updates the current balance of an account.\n     *\n     * @private\n     * @param {string} address - A hex address of a the account to be updated\n     * @returns {Promise} after the account balance is updated\n     *\n     */\n    async _updateAccount(address) {\n        // query balance\n        let account = null;\n        try {\n            const provider = this._getProvider();\n\n            account = await provider.getAccount(address);\n        }\n        catch (e) {\n            // This can happen if the account doesn't have any dnero/dtoken yet.\n            account = {\n                coins: {\n                    dnerowei: 0,\n                    dtokenwei: 0,\n                }\n            };\n        }\n\n        const result = {\n            address: address,\n            balances: account.coins,\n        };\n\n        // update accounts state\n        const { accounts } = this.store.getState();\n        const current = accounts[address.toLowerCase()] || accounts[address] || {};\n        // only populate if the entry is still present\n\n        accounts[address] = {\n            // keep our stakes\n            ...current,\n            ...result,\n            balances: {\n                ...current.balances,\n                ...result.balances\n            }\n        };\n        this.store.updateState({ accounts });\n    }\n\n    /**\n     * Updates current address balances from balanceChecker deployed contract instance\n     * @param {*} addresses\n     * @param {*} deployedContractAddress\n     */\n    async _updateAccountTokensViaBalanceChecker(addresses) {\n        const { accounts } = this.store.getState();\n        const provider = this._getProvider();\n        const chainId = this._getNetwork().chainId;\n        const tokens = this._getTokens();\n        let tokenAddresses = _.map(tokens, 'address');\n        tokenAddresses = _.map(tokenAddresses, _.trim);\n        const deployedContractAddress = SingleCallTokenBalancesAddressByChainId[chainId];\n\n        if(_.isNil(deployedContractAddress)){\n            // TODO not supported... call each token?\n            return;\n        }\n\n        if(tokenAddresses.length === 0){\n            // No tokens to fetch\n            return;\n        }\n\n        if(addresses.length === 0){\n            // No addresses to fetch\n            return;\n        }\n\n        try {\n            const balanceCheckContract = new dnerojs.Contract(deployedContractAddress, SingleCallTokenBalancesABI, provider);\n            const balances = await balanceCheckContract.balances(addresses, tokenAddresses);\n            // contract returns a array of length addresses.length * tokens.length so we need to partiton it\n            const balancesGroupedByAddress = _.chunk(balances, tokenAddresses.length);\n\n            addresses.forEach((address, index) => {\n                const addressTokenBalances = balancesGroupedByAddress[index];\n                const tokenBalancesByTokenAddress = _.reduce(addressTokenBalances, function(current, balance, tokenIdx) {\n                    const tokenAddress = tokenAddresses[tokenIdx];\n                    return Object.assign(current, {\n                        [tokenAddress]: balance.toString()\n                    });\n                }, {});\n                const currentAccounts = this.store.getState().accounts;\n                const currentBalances = currentAccounts[address].balances;\n                const current = accounts[address.toLowerCase()] || accounts[address];\n\n                accounts[address] = {\n                    ...current,\n                    address,\n                    balances: {\n                        ...currentBalances,\n                        ...tokenBalancesByTokenAddress\n                    }};\n            });\n\n            this.store.updateState({ accounts });\n        }\n        catch (e) {\n\n        }\n    }\n\n    async updateAccountDDropStake(address){\n        let stakingBalance = new BigNumber(0);\n        let totalShares = new BigNumber(0);\n        let estimatedDDropOwned = new BigNumber(0);\n        let delegate = null;\n\n        try {\n            const provider = this._getProvider();\n            const network = this._getNetwork();\n            const chainId = network.chainId;\n            const deployedContractAddress = DDropStakingAddressByChainId[chainId];\n            if(_.isNil(deployedContractAddress)){\n                return null;\n            }\n            const ddropStakingContract = new dnerojs.Contract(deployedContractAddress, DDropStakingABI, provider);\n            stakingBalance = await ddropStakingContract.balanceOf(address);\n\n            if(!stakingBalance.isZero()){\n                estimatedDDropOwned = await ddropStakingContract.estimatedDDropOwnedBy(address);\n                totalShares = await ddropStakingContract.totalShares();\n                delegate = await ddropStakingContract.delegates(address);\n            }\n        }\n        catch (e) {\n            // No Update\n            return null;\n        }\n\n        // update accounts state\n        const { accounts } = this.store.getState();\n        const current = accounts[address.toLowerCase()] || accounts[address];\n        // only populate if the entry is still present\n        if (!current) {\n            return null;\n        }\n\n        const votingPower = ((new BigNumber(stakingBalance.toString())).dividedBy((new BigNumber(totalShares.toString())))).multipliedBy(100);\n        const ddropStakingInfo = {\n            balance: stakingBalance.toString(),\n            totalShares: totalShares.toString(),\n            estimatedTokenOwnedWithRewards: estimatedDDropOwned.toString(),\n            votingPower: stakingBalance.isZero() ? \"0\" : votingPower.toString(),\n            votingDelegate: delegate\n        };\n\n        accounts[address] = {\n            ...current,\n            dnc20Stakes: {\n                ddrop: ddropStakingInfo\n            }\n        };\n        this.store.updateState({ accounts });\n\n        return ddropStakingInfo;\n    }\n\n    async updateAccountStakes(address){\n        let stakes = null;\n\n        try {\n            const network = this._getNetwork();\n            const chainId = network.chainId;\n            const explorerUrl = dnerojs.networks.getExplorerUrlForChainId(chainId);\n            const explorerApiUrl = `${explorerUrl}:8443/api`;\n            const listStakesUrl = `${explorerApiUrl}/stake/${address}?hasBalance=true&types[]=vcp&types[]=gcp&types[]=eenp`;\n            const response = await fetch(listStakesUrl);\n            const responseJson = await response.json();\n            stakes = _.get(responseJson, ['body', 'sourceRecords'], []);\n        }\n        catch (e) {\n            // No Update\n            return [];\n        }\n\n        // update accounts state\n        const { accounts } = this.store.getState();\n        const current = accounts[address.toLowerCase()] || accounts[address];\n        // only populate if the entry is still present\n        if (!current) {\n            return [];\n        }\n        accounts[address] = {\n            ...current,\n            stakes: stakes\n        };\n        this.store.updateState({ accounts });\n\n        // DNC20 stakes\n        await this.updateAccountDDropStake(address);\n\n        return stakes;\n    }\n\n    async detectNewTokens() {\n        const selectedAddress = this._preferencesController.getSelectedAddress();\n        const provider = this._getProvider();\n        const network = this._getNetwork();\n        const chainId = network.chainId;\n        const knownTokenList = tokensByChainId[chainId];\n        const tokens = this._getTokens();\n        let tokenAddresses = _.map(tokens, 'address');\n        let trackedTokens = new Set(_.map(tokenAddresses, _.trim));\n\n        const tokensToDetect = [];\n        for (const tokenAddress in knownTokenList) {\n            if (!trackedTokens.has(tokenAddress)) {\n                tokensToDetect.push(tokenAddress);\n            }\n        }\n\n        if(tokensToDetect.length === 0){\n            return;\n        }\n\n        const sliceOfTokensToDetect = [\n            tokensToDetect.slice(0, 1000),\n            tokensToDetect.slice(1000, tokensToDetect.length - 1),\n        ];\n        const balanceCheckContract = new dnerojs.Contract(SingleCallTokenBalancesAddressByChainId[chainId], SingleCallTokenBalancesABI, provider);\n\n        for (const tokensSlice of sliceOfTokensToDetect) {\n            let result;\n            try {\n                result = await balanceCheckContract.balances([selectedAddress], tokensSlice);\n            } catch (error) {\n                return;\n            }\n\n            const tokensWithBalance = tokensSlice.filter((_, index) => {\n                const balance = result[index];\n                return balance && !balance.isZero();\n            });\n\n            await Promise.all(\n                tokensWithBalance.map((tokenAddress) => {\n                    return this._preferencesController.addToken(\n                        tokenAddress,\n                        knownTokenList[tokenAddress].symbol,\n                        knownTokenList[tokenAddress].decimals,\n                    );\n                }),\n            );\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}