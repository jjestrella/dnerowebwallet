{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar Range = require('../classes/range.js');\n\nvar Comparator = require('../classes/comparator.js');\n\nvar ANY = Comparator.ANY;\n\nvar satisfies = require('../functions/satisfies.js');\n\nvar compare = require('../functions/compare.js'); // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\n\nvar subset = function subset(sub, dom) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (sub === dom) {\n    return true;\n  }\n\n  sub = new Range(sub, options);\n  dom = new Range(dom, options);\n  var sawNonNull = false;\n\n  var _iterator = _createForOfIteratorHelper(sub.set),\n      _step;\n\n  try {\n    OUTER: for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var simpleSub = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(dom.set),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var simpleDom = _step2.value;\n          var isSub = simpleSubset(simpleSub, simpleDom, options);\n          sawNonNull = sawNonNull || isSub !== null;\n\n          if (isSub) {\n            continue OUTER;\n          }\n        } // the null set is a subset of everything, but null simple ranges in\n        // a complex range should be ignored.  so if we saw a non-null range,\n        // then we know this isn't a subset, but if EVERY simple range was null,\n        // then it is a subset.\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (sawNonNull) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n};\n\nvar simpleSubset = function simpleSubset(sub, dom, options) {\n  if (sub === dom) {\n    return true;\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true;\n    } else if (options.includePrerelease) {\n      sub = [new Comparator('>=0.0.0-0')];\n    } else {\n      sub = [new Comparator('>=0.0.0')];\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true;\n    } else {\n      dom = [new Comparator('>=0.0.0')];\n    }\n  }\n\n  var eqSet = new Set();\n  var gt, lt;\n\n  var _iterator3 = _createForOfIteratorHelper(sub),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var c = _step3.value;\n\n      if (c.operator === '>' || c.operator === '>=') {\n        gt = higherGT(gt, c, options);\n      } else if (c.operator === '<' || c.operator === '<=') {\n        lt = lowerLT(lt, c, options);\n      } else {\n        eqSet.add(c.semver);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  if (eqSet.size > 1) {\n    return null;\n  }\n\n  var gtltComp;\n\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options);\n\n    if (gtltComp > 0) {\n      return null;\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null;\n    }\n  } // will iterate one or zero times\n\n\n  var _iterator4 = _createForOfIteratorHelper(eqSet),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var eq = _step4.value;\n\n      if (gt && !satisfies(eq, String(gt), options)) {\n        return null;\n      }\n\n      if (lt && !satisfies(eq, String(lt), options)) {\n        return null;\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(dom),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _c = _step6.value;\n\n          if (!satisfies(eq, String(_c), options)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return true;\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  var higher, lower;\n  var hasDomLT, hasDomGT; // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n\n  var needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;\n  var needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false; // exception: <1.2.3-0 is the same as <1.2.3\n\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false;\n  }\n\n  var _iterator5 = _createForOfIteratorHelper(dom),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _c2 = _step5.value;\n      hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';\n      hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';\n\n      if (gt) {\n        if (needDomGTPre) {\n          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomGTPre.major && _c2.semver.minor === needDomGTPre.minor && _c2.semver.patch === needDomGTPre.patch) {\n            needDomGTPre = false;\n          }\n        }\n\n        if (_c2.operator === '>' || _c2.operator === '>=') {\n          higher = higherGT(gt, _c2, options);\n\n          if (higher === _c2 && higher !== gt) {\n            return false;\n          }\n        } else if (gt.operator === '>=' && !satisfies(gt.semver, String(_c2), options)) {\n          return false;\n        }\n      }\n\n      if (lt) {\n        if (needDomLTPre) {\n          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomLTPre.major && _c2.semver.minor === needDomLTPre.minor && _c2.semver.patch === needDomLTPre.patch) {\n            needDomLTPre = false;\n          }\n        }\n\n        if (_c2.operator === '<' || _c2.operator === '<=') {\n          lower = lowerLT(lt, _c2, options);\n\n          if (lower === _c2 && lower !== lt) {\n            return false;\n          }\n        } else if (lt.operator === '<=' && !satisfies(lt.semver, String(_c2), options)) {\n          return false;\n        }\n      }\n\n      if (!_c2.operator && (lt || gt) && gtltComp !== 0) {\n        return false;\n      }\n    } // if there was a < or >, and nothing in the dom, then must be false\n    // UNLESS it was limited by another range in the other direction.\n    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false;\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false;\n  } // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n\n\n  if (needDomGTPre || needDomLTPre) {\n    return false;\n  }\n\n  return true;\n}; // >=1.2.3 is lower than >1.2.3\n\n\nvar higherGT = function higherGT(a, b, options) {\n  if (!a) {\n    return b;\n  }\n\n  var comp = compare(a.semver, b.semver, options);\n  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;\n}; // <=1.2.3 is higher than <1.2.3\n\n\nvar lowerLT = function lowerLT(a, b, options) {\n  if (!a) {\n    return b;\n  }\n\n  var comp = compare(a.semver, b.semver, options);\n  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;\n};\n\nmodule.exports = subset;","map":{"version":3,"names":["Range","require","Comparator","ANY","satisfies","compare","subset","sub","dom","options","sawNonNull","set","OUTER","simpleSub","simpleDom","isSub","simpleSubset","length","semver","includePrerelease","eqSet","Set","gt","lt","c","operator","higherGT","lowerLT","add","size","gtltComp","eq","String","higher","lower","hasDomLT","hasDomGT","needDomLTPre","prerelease","needDomGTPre","major","minor","patch","a","b","comp","module","exports"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/@ledgerhq/devices/node_modules/semver/ranges/subset.js"],"sourcesContent":["const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = [new Comparator('>=0.0.0-0')]\n    } else {\n      sub = [new Comparator('>=0.0.0')]\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = [new Comparator('>=0.0.0')]\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}