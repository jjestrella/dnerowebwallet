{"ast":null,"code":"import _classCallCheck from \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { id } from \"./id\";\nvar padding = new Uint8Array(32);\npadding.fill(0);\nvar NegativeOne = BigNumber.from(-1);\nvar Zero = BigNumber.from(0);\nvar One = BigNumber.from(1);\nvar MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value) {\n  var bytes = arrayify(value);\n  var padOffset = bytes.length % 32;\n\n  if (padOffset) {\n    return hexConcat([bytes, padding.slice(padOffset)]);\n  }\n\n  return hexlify(bytes);\n}\n\nvar hexTrue = hexZeroPad(One.toHexString(), 32);\nvar hexFalse = hexZeroPad(Zero.toHexString(), 32);\nvar domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nvar domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\n\nfunction checkString(key) {\n  return function (value) {\n    if (typeof value !== \"string\") {\n      logger.throwArgumentError(\"invalid domain value for \".concat(JSON.stringify(key)), \"domain.\".concat(key), value);\n    }\n\n    return value;\n  };\n}\n\nvar domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function chainId(value) {\n    try {\n      return BigNumber.from(value).toString();\n    } catch (error) {}\n\n    return logger.throwArgumentError(\"invalid domain value for \\\"chainId\\\"\", \"domain.chainId\", value);\n  },\n  verifyingContract: function verifyingContract(value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n\n    return logger.throwArgumentError(\"invalid domain value \\\"verifyingContract\\\"\", \"domain.verifyingContract\", value);\n  },\n  salt: function salt(value) {\n    try {\n      var bytes = arrayify(value);\n\n      if (bytes.length !== 32) {\n        throw new Error(\"bad length\");\n      }\n\n      return hexlify(bytes);\n    } catch (error) {}\n\n    return logger.throwArgumentError(\"invalid domain value \\\"salt\\\"\", \"domain.salt\", value);\n  }\n};\n\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    var match = type.match(/^(u?)int(\\d*)$/);\n\n    if (match) {\n      var signed = match[1] === \"\";\n      var width = parseInt(match[2] || \"256\");\n\n      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n        logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n      }\n\n      var boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n      var boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n      return function (value) {\n        var v = BigNumber.from(value);\n\n        if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n          logger.throwArgumentError(\"value out-of-bounds for \".concat(type), \"value\", value);\n        }\n\n        return hexZeroPad(v.toTwos(256).toHexString(), 32);\n      };\n    }\n  } // bytesXX\n\n  {\n    var _match = type.match(/^bytes(\\d+)$/);\n\n    if (_match) {\n      var _width = parseInt(_match[1]);\n\n      if (_width === 0 || _width > 32 || _match[1] !== String(_width)) {\n        logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n      }\n\n      return function (value) {\n        var bytes = arrayify(value);\n\n        if (bytes.length !== _width) {\n          logger.throwArgumentError(\"invalid length for \".concat(type), \"value\", value);\n        }\n\n        return hexPadRight(value);\n      };\n    }\n  }\n\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return hexZeroPad(getAddress(value), 32);\n      };\n\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n\n  return null;\n}\n\nfunction encodeType(name, fields) {\n  return \"\".concat(name, \"(\").concat(fields.map(function (_ref) {\n    var name = _ref.name,\n        type = _ref.type;\n    return type + \" \" + name;\n  }).join(\",\"), \")\");\n}\n\nexport var TypedDataEncoder = /*#__PURE__*/function () {\n  function TypedDataEncoder(types) {\n    _classCallCheck(this, TypedDataEncoder);\n\n    defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n    defineReadOnly(this, \"_encoderCache\", {});\n    defineReadOnly(this, \"_types\", {}); // Link struct types to their direct child structs\n\n    var links = {}; // Link structs to structs which contain them as a child\n\n    var parents = {}; // Link all subtypes within a given struct\n\n    var subtypes = {};\n    Object.keys(types).forEach(function (type) {\n      links[type] = {};\n      parents[type] = [];\n      subtypes[type] = {};\n    });\n\n    var _loop = function _loop(name) {\n      var uniqueNames = {};\n      types[name].forEach(function (field) {\n        // Check each field has a unique name\n        if (uniqueNames[field.name]) {\n          logger.throwArgumentError(\"duplicate variable name \".concat(JSON.stringify(field.name), \" in \").concat(JSON.stringify(name)), \"types\", types);\n        }\n\n        uniqueNames[field.name] = true; // Get the base type (drop any array specifiers)\n\n        var baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n\n        if (baseType === name) {\n          logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(baseType)), \"types\", types);\n        } // Is this a base encoding type?\n\n\n        var encoder = getBaseEncoder(baseType);\n\n        if (encoder) {\n          return;\n        }\n\n        if (!parents[baseType]) {\n          logger.throwArgumentError(\"unknown type \".concat(JSON.stringify(baseType)), \"types\", types);\n        } // Add linkage\n\n\n        parents[baseType].push(name);\n        links[name][baseType] = true;\n      });\n    };\n\n    for (var name in types) {\n      _loop(name);\n    } // Deduce the primary type\n\n\n    var primaryTypes = Object.keys(parents).filter(function (n) {\n      return parents[n].length === 0;\n    });\n\n    if (primaryTypes.length === 0) {\n      logger.throwArgumentError(\"missing primary type\", \"types\", types);\n    } else if (primaryTypes.length > 1) {\n      logger.throwArgumentError(\"ambiguous primary types or unused types: \".concat(primaryTypes.map(function (t) {\n        return JSON.stringify(t);\n      }).join(\", \")), \"types\", types);\n    }\n\n    defineReadOnly(this, \"primaryType\", primaryTypes[0]); // Check for circular type references\n\n    function checkCircular(type, found) {\n      if (found[type]) {\n        logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(type)), \"types\", types);\n      }\n\n      found[type] = true;\n      Object.keys(links[type]).forEach(function (child) {\n        if (!parents[child]) {\n          return;\n        } // Recursively check children\n\n\n        checkCircular(child, found); // Mark all ancestors as having this decendant\n\n        Object.keys(found).forEach(function (subtype) {\n          subtypes[subtype][child] = true;\n        });\n      });\n      delete found[type];\n    }\n\n    checkCircular(this.primaryType, {}); // Compute each fully describe type\n\n    for (var _name in subtypes) {\n      var st = Object.keys(subtypes[_name]);\n      st.sort();\n      this._types[_name] = encodeType(_name, types[_name]) + st.map(function (t) {\n        return encodeType(t, types[t]);\n      }).join(\"\");\n    }\n  }\n\n  _createClass(TypedDataEncoder, [{\n    key: \"getEncoder\",\n    value: function getEncoder(type) {\n      var encoder = this._encoderCache[type];\n\n      if (!encoder) {\n        encoder = this._encoderCache[type] = this._getEncoder(type);\n      }\n\n      return encoder;\n    }\n  }, {\n    key: \"_getEncoder\",\n    value: function _getEncoder(type) {\n      var _this = this;\n\n      // Basic encoder type (address, bool, uint256, etc)\n      {\n        var encoder = getBaseEncoder(type);\n\n        if (encoder) {\n          return encoder;\n        }\n      } // Array\n\n      var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\n      if (match) {\n        var subtype = match[1];\n        var subEncoder = this.getEncoder(subtype);\n        var length = parseInt(match[3]);\n        return function (value) {\n          if (length >= 0 && value.length !== length) {\n            logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n          }\n\n          var result = value.map(subEncoder);\n\n          if (_this._types[subtype]) {\n            result = result.map(keccak256);\n          }\n\n          return keccak256(hexConcat(result));\n        };\n      } // Struct\n\n\n      var fields = this.types[type];\n\n      if (fields) {\n        var encodedType = id(this._types[type]);\n        return function (value) {\n          var values = fields.map(function (_ref2) {\n            var name = _ref2.name,\n                type = _ref2.type;\n\n            var result = _this.getEncoder(type)(value[name]);\n\n            if (_this._types[type]) {\n              return keccak256(result);\n            }\n\n            return result;\n          });\n          values.unshift(encodedType);\n          return hexConcat(values);\n        };\n      }\n\n      return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n  }, {\n    key: \"encodeType\",\n    value: function encodeType(name) {\n      var result = this._types[name];\n\n      if (!result) {\n        logger.throwArgumentError(\"unknown type: \".concat(JSON.stringify(name)), \"name\", name);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"encodeData\",\n    value: function encodeData(type, value) {\n      return this.getEncoder(type)(value);\n    }\n  }, {\n    key: \"hashStruct\",\n    value: function hashStruct(name, value) {\n      return keccak256(this.encodeData(name, value));\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      return this.encodeData(this.primaryType, value);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(value) {\n      return this.hashStruct(this.primaryType, value);\n    }\n  }, {\n    key: \"_visit\",\n    value: function _visit(type, value, callback) {\n      var _this2 = this;\n\n      // Basic encoder type (address, bool, uint256, etc)\n      {\n        var encoder = getBaseEncoder(type);\n\n        if (encoder) {\n          return callback(type, value);\n        }\n      } // Array\n\n      var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\n      if (match) {\n        var subtype = match[1];\n        var length = parseInt(match[3]);\n\n        if (length >= 0 && value.length !== length) {\n          logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n        }\n\n        return value.map(function (v) {\n          return _this2._visit(subtype, v, callback);\n        });\n      } // Struct\n\n\n      var fields = this.types[type];\n\n      if (fields) {\n        return fields.reduce(function (accum, _ref3) {\n          var name = _ref3.name,\n              type = _ref3.type;\n          accum[name] = _this2._visit(type, value[name], callback);\n          return accum;\n        }, {});\n      }\n\n      return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n  }, {\n    key: \"visit\",\n    value: function visit(value, callback) {\n      return this._visit(this.primaryType, value, callback);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(types) {\n      return new TypedDataEncoder(types);\n    }\n  }, {\n    key: \"getPrimaryType\",\n    value: function getPrimaryType(types) {\n      return TypedDataEncoder.from(types).primaryType;\n    }\n  }, {\n    key: \"hashStruct\",\n    value: function hashStruct(name, types, value) {\n      return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n  }, {\n    key: \"hashDomain\",\n    value: function hashDomain(domain) {\n      var domainFields = [];\n\n      for (var name in domain) {\n        var type = domainFieldTypes[name];\n\n        if (!type) {\n          logger.throwArgumentError(\"invalid typed-data domain key: \".concat(JSON.stringify(name)), \"domain\", domain);\n        }\n\n        domainFields.push({\n          name: name,\n          type: type\n        });\n      }\n\n      domainFields.sort(function (a, b) {\n        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n      });\n      return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n        EIP712Domain: domainFields\n      }, domain);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(domain, types, value) {\n      return hexConcat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(domain, types, value) {\n      return keccak256(TypedDataEncoder.encode(domain, types, value));\n    } // Replaces all address types with ENS names with their looked up address\n\n  }, {\n    key: \"resolveNames\",\n    value: function resolveNames(domain, types, value, resolveName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var ensCache, encoder, name;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Make a copy to isolate it from the object passed in\n                domain = shallowCopy(domain); // Look up all ENS names\n\n                ensCache = {}; // Do we need to look up the domain's verifyingContract?\n\n                if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n                  ensCache[domain.verifyingContract] = \"0x\";\n                } // We are going to use the encoder to visit all the base values\n\n\n                encoder = TypedDataEncoder.from(types); // Get a list of all the addresses\n\n                encoder.visit(value, function (type, value) {\n                  if (type === \"address\" && !isHexString(value, 20)) {\n                    ensCache[value] = \"0x\";\n                  }\n\n                  return value;\n                }); // Lookup each name\n\n                _context.t0 = _regeneratorRuntime().keys(ensCache);\n\n              case 6:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 13;\n                  break;\n                }\n\n                name = _context.t1.value;\n                _context.next = 10;\n                return resolveName(name);\n\n              case 10:\n                ensCache[name] = _context.sent;\n                _context.next = 6;\n                break;\n\n              case 13:\n                // Replace the domain verifyingContract if needed\n                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                  domain.verifyingContract = ensCache[domain.verifyingContract];\n                } // Replace all ENS names with their address\n\n\n                value = encoder.visit(value, function (type, value) {\n                  if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                  }\n\n                  return value;\n                });\n                return _context.abrupt(\"return\", {\n                  domain: domain,\n                  value: value\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"getPayload\",\n    value: function getPayload(domain, types, value) {\n      // Validate the domain fields\n      TypedDataEncoder.hashDomain(domain); // Derive the EIP712Domain Struct reference type\n\n      var domainValues = {};\n      var domainTypes = [];\n      domainFieldNames.forEach(function (name) {\n        var value = domain[name];\n\n        if (value == null) {\n          return;\n        }\n\n        domainValues[name] = domainChecks[name](value);\n        domainTypes.push({\n          name: name,\n          type: domainFieldTypes[name]\n        });\n      });\n      var encoder = TypedDataEncoder.from(types);\n      var typesWithDomain = shallowCopy(types);\n\n      if (typesWithDomain.EIP712Domain) {\n        logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n      } else {\n        typesWithDomain.EIP712Domain = domainTypes;\n      } // Validate the data structures and types\n\n\n      encoder.encode(value);\n      return {\n        types: typesWithDomain,\n        domain: domainValues,\n        primaryType: encoder.primaryType,\n        message: encoder.visit(value, function (type, value) {\n          // bytes\n          if (type.match(/^bytes(\\d*)/)) {\n            return hexlify(arrayify(value));\n          } // uint or int\n\n\n          if (type.match(/^u?int/)) {\n            return BigNumber.from(value).toString();\n          }\n\n          switch (type) {\n            case \"address\":\n              return value.toLowerCase();\n\n            case \"bool\":\n              return !!value;\n\n            case \"string\":\n              if (typeof value !== \"string\") {\n                logger.throwArgumentError(\"invalid string\", \"value\", value);\n              }\n\n              return value;\n          }\n\n          return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n        })\n      };\n    }\n  }]);\n\n  return TypedDataEncoder;\n}();","map":{"version":3,"sources":["../src.ts/typed-data.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { id } from \"./id\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return hexConcat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        if (typeof (value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (value) {\n        try {\n            return BigNumber.from(value).toString();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return hexlify(bytes);\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function (value) {\n                const v = BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n                }\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function (value) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n    constructor(types) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n        defineReadOnly(this, \"_encoderCache\", {});\n        defineReadOnly(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type) => {\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for (const name in types) {\n            const uniqueNames = {};\n            types[name].forEach((field) => {\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        }\n        else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        }\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(hexConcat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            };\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v) => this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    static encode(domain, types, value) {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    static resolveNames(domain, types, value, resolveName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Make a copy to isolate it from the object passed in\n            domain = shallowCopy(domain);\n            // Look up all ENS names\n            const ensCache = {};\n            // Do we need to look up the domain's verifyingContract?\n            if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n                ensCache[domain.verifyingContract] = \"0x\";\n            }\n            // We are going to use the encoder to visit all the base values\n            const encoder = TypedDataEncoder.from(types);\n            // Get a list of all the addresses\n            encoder.visit(value, (type, value) => {\n                if (type === \"address\" && !isHexString(value, 20)) {\n                    ensCache[value] = \"0x\";\n                }\n                return value;\n            });\n            // Lookup each name\n            for (const name in ensCache) {\n                ensCache[name] = yield resolveName(name);\n            }\n            // Replace the domain verifyingContract if needed\n            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                domain.verifyingContract = ensCache[domain.verifyingContract];\n            }\n            // Replace all ENS names with their address\n            value = encoder.visit(value, (type, value) => {\n                if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                }\n                return value;\n            });\n            return { domain, value };\n        });\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        }\n        else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof (value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n//# sourceMappingURL=typed-data.js.map"]},"metadata":{},"sourceType":"module"}