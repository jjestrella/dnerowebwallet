{"ast":null,"code":"import _ from'lodash';import React from'react';import{useForm}from'react-hook-form';import{ethers}from'ethers';import*as dnerojs from'@dnerolabs/dnero-js';import FormField from'../../components/FormField';import{formatNativeTokenAmountToLargestUnit,isHolderSummary,isValidAmount,numberWithCommas,toNativeTokenLargestUnit}from'../../utils/Utils';import{DDropAsset,DTokenAsset,DneroAsset}from'../../constants/assets';import{getMaxDelegatedStakeAmount,getMaxStakeAmount,getMinStakeAmount,StakePurposeForDDROP}from'../../constants';import FlatButton from\"../buttons/FlatButton\";import BigNumber from\"bignumber.js\";export default function DepositStakeTxForm(props){var onSubmit=props.onSubmit,defaultValues=props.defaultValues,formRef=props.formRef,selectedAccount=props.selectedAccount,assets=props.assets,chainId=props.chainId,onShowDelegatedSentryNodes=props.onShowDelegatedSentryNodes;var _useForm=useForm({mode:'onChange',defaultValues:defaultValues||{purpose:dnerojs.constants.StakePurpose.StakeForSentry,holder:'',holderSummary:'',amount:'',delegatedSentryNode:null}}),register=_useForm.register,handleSubmit=_useForm.handleSubmit,errors=_useForm.errors,watch=_useForm.watch,setValue=_useForm.setValue;React.useEffect(function(){register('delegatedSentryNode');},[register]);var purpose=parseInt(watch('purpose'));var delegatedSentryNode=watch('delegatedSentryNode');var holderTitle=null;var holderPlaceholder=null;var stakeAmountTitle=null;if(purpose===dnerojs.constants.StakePurpose.StakeForValidator){holderTitle='Validator Node Holder (Address)';holderPlaceholder='Enter validator node address';stakeAmountTitle='Dnero Stake Amount';}else if(purpose===dnerojs.constants.StakePurpose.StakeForSentry){holderTitle='Sentry Node Holder (Summary)';holderPlaceholder='Enter sentry node summary';stakeAmountTitle='Dnero Stake Amount';}else if(purpose===dnerojs.constants.StakePurpose.StakeForEliteEdge){holderTitle='Edge Node Holder (Summary)';holderPlaceholder='Enter edge node summary';stakeAmountTitle='DToken Stake Amount';}else if(purpose===StakePurposeForDDROP){holderTitle=null;holderPlaceholder=null;stakeAmountTitle='DDrop Stake Amount';}var populateMaxAmount=function populateMaxAmount(){var amount='';var max=getMaxStakeAmount(purpose);if(purpose===dnerojs.constants.StakePurpose.StakeForValidator||purpose===dnerojs.constants.StakePurpose.StakeForSentry){amount=toNativeTokenLargestUnit(selectedAccount.balances['dnerowei']).toString(10);if(purpose===dnerojs.constants.StakePurpose.StakeForEliteEdge){amount=Math.min(max,parseFloat(amount));}else if(purpose===dnerojs.constants.StakePurpose.StakeForSentry||!_.isNil(delegatedSentryNode)){max=getMaxDelegatedStakeAmount(purpose);amount=Math.min(max,parseFloat(amount));}}else if(purpose===dnerojs.constants.StakePurpose.StakeForEliteEdge){var maxDtokenBN=new BigNumber(selectedAccount.balances['dtokenwei']).minus(dnerojs.constants.gasPriceDefault);amount=toNativeTokenLargestUnit(maxDtokenBN.toString(10)).toString(10);amount=Math.min(max,parseFloat(amount));}else if(purpose===StakePurposeForDDROP){var dDropAsset=DDropAsset(chainId);var balance=selectedAccount.balances[dDropAsset.address]||'0';amount=toNativeTokenLargestUnit(balance).toString(10);}setValue('amount',amount);};return/*#__PURE__*/React.createElement(\"form\",{className:'TxForm TxForm--DepositStake',onSubmit:handleSubmit(onSubmit),ref:formRef},/*#__PURE__*/React.createElement(FormField,{title:'Stake Type',error:errors.purpose&&'Stake type is required'},/*#__PURE__*/React.createElement(\"select\",{className:'RoundedInput',name:'purpose',ref:register({required:true})},/*#__PURE__*/React.createElement(\"option\",{key:'__placeholder__',value:'',disabled:true},\"Select stake type\"),/*#__PURE__*/React.createElement(\"option\",{key:'sentry',value:dnerojs.constants.StakePurpose.StakeForSentry},\"Sentry Node\"),/*#__PURE__*/React.createElement(\"option\",{key:'validator',value:dnerojs.constants.StakePurpose.StakeForValidator},\"Validator Node\"),/*#__PURE__*/React.createElement(\"option\",{key:'elite-edge',value:dnerojs.constants.StakePurpose.StakeForEliteEdge},\"Edge Node\"),DDropAsset(chainId)&&/*#__PURE__*/React.createElement(\"option\",{key:'ddrop',value:StakePurposeForDDROP},\"DDROP\"))),purpose===dnerojs.constants.StakePurpose.StakeForValidator&&/*#__PURE__*/React.createElement(FormField,{title:holderTitle,error:errors.holder&&'A valid validator address is required'},/*#__PURE__*/React.createElement(\"input\",{name:\"holder\",className:'RoundedInput',placeholder:holderPlaceholder,ref:register({required:true,validate:function validate(s){return ethers.utils.isAddress(s);}})})),purpose===dnerojs.constants.StakePurpose.StakeForSentry&&/*#__PURE__*/React.createElement(FormField,{title:delegatedSentryNode?'Delegated Sentry Node':holderTitle,error:errors.holderSummary&&'Sentry node summary or delegated sentry node is required'},/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"textarea\",{name:\"holderSummary\",className:'RoundedInput',style:{height:100,display:delegatedSentryNode?'none':'block'},placeholder:holderPlaceholder,ref:register({required:true,validate:function validate(s){return isHolderSummary(s);}})}),_.isNil(delegatedSentryNode)&&/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){onShowDelegatedSentryNodes(function(node){setValue('holderSummary',node.node_summary);setValue('delegatedSentryNode',node);});},className:'Link',style:{marginTop:8,textAlign:'left'}},\"Select Delegated Sentry Node\")),!_.isNil(delegatedSentryNode)&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:'RoundedInput'},/*#__PURE__*/React.createElement(\"div\",{className:'RoundedInputClearableValue'},/*#__PURE__*/React.createElement(\"div\",null,delegatedSentryNode.name),/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){setValue('holderSummary',null);setValue('delegatedSentryNode',null);},style:{marginLeft:'auto'}},/*#__PURE__*/React.createElement(\"img\",{src:'/img/icons/alert-x@2x.png'})))))),purpose===dnerojs.constants.StakePurpose.StakeForEliteEdge&&/*#__PURE__*/React.createElement(FormField,{title:holderTitle,error:errors.holderSummary&&'Edge node summary is required'},/*#__PURE__*/React.createElement(\"textarea\",{name:\"holderSummary\",className:'RoundedInput',style:{height:100},placeholder:holderPlaceholder,ref:register({required:true,validate:function validate(s){return dnerojs.transactions.DepositStakeV2Transaction.isValidHolderSummary(purpose,s);}})})),/*#__PURE__*/React.createElement(FormField,{title:stakeAmountTitle,error:errors.amount&&errors.amount.message},/*#__PURE__*/React.createElement(\"div\",{className:'RoundedInputWrapper'},/*#__PURE__*/React.createElement(\"input\",{name:\"amount\",className:'RoundedInput',placeholder:'Enter amount to stake',ref:register({required:{value:true,message:'Stake amount is required'},validate:{sufficientBalance:function sufficientBalance(s){var isValid=true;if(purpose===dnerojs.constants.StakePurpose.StakeForEliteEdge){isValid=isValidAmount(selectedAccount,DTokenAsset,s);}else if(purpose===dnerojs.constants.StakePurpose.StakeForSentry||purpose===dnerojs.constants.StakePurpose.StakeForValidator){isValid=isValidAmount(selectedAccount,DneroAsset,s);}else if(purpose===StakePurposeForDDROP){var dDropAsset=DDropAsset(chainId);isValid=isValidAmount(selectedAccount,dDropAsset,s);}return isValid?true:'Insufficient balance';},moreThanMin:function moreThanMin(s){var f=parseFloat(s);var min=getMinStakeAmount(purpose);if(purpose===dnerojs.constants.StakePurpose.StakeForEliteEdge){if(min>f){return\"Invalid amount. Must be at least \".concat(numberWithCommas(min),\" DTOKEN\");}}else if(purpose===dnerojs.constants.StakePurpose.StakeForSentry||purpose===dnerojs.constants.StakePurpose.StakeForValidator){if(min>f){return\"Invalid amount. Must be at least \".concat(numberWithCommas(min),\" DNERO\");}}return true;},lessThanMax:function lessThanMax(s){var f=parseFloat(s);var max=getMaxStakeAmount(purpose);if(purpose===dnerojs.constants.StakePurpose.StakeForEliteEdge){if(max<f){return\"Invalid amount. Must be less than \".concat(numberWithCommas(max),\" DTOKEN\");}}else if(purpose===dnerojs.constants.StakePurpose.StakeForSentry||!_.isNil(delegatedSentryNode)){max=getMaxDelegatedStakeAmount(purpose);if(max<f){return\"Invalid amount. There's a max of \".concat(numberWithCommas(max),\" DNERO for delegated nodes. Please download and run your own Sentry Node to stake more.\");}}return true;},moreThanZero:function moreThanZero(s){var f=parseFloat(s);return f>0?true:'Invalid stake amount';}}})}),/*#__PURE__*/React.createElement(FlatButton,{title:'Max',size:'small',className:'RoundedInputButton',onClick:populateMaxAmount}))));}","map":{"version":3,"names":["_","React","useForm","ethers","dnerojs","FormField","formatNativeTokenAmountToLargestUnit","isHolderSummary","isValidAmount","numberWithCommas","toNativeTokenLargestUnit","DDropAsset","DTokenAsset","DneroAsset","getMaxDelegatedStakeAmount","getMaxStakeAmount","getMinStakeAmount","StakePurposeForDDROP","FlatButton","BigNumber","DepositStakeTxForm","props","onSubmit","defaultValues","formRef","selectedAccount","assets","chainId","onShowDelegatedSentryNodes","mode","purpose","constants","StakePurpose","StakeForSentry","holder","holderSummary","amount","delegatedSentryNode","register","handleSubmit","errors","watch","setValue","useEffect","parseInt","holderTitle","holderPlaceholder","stakeAmountTitle","StakeForValidator","StakeForEliteEdge","populateMaxAmount","max","balances","toString","Math","min","parseFloat","isNil","maxDtokenBN","minus","gasPriceDefault","dDropAsset","balance","address","required","validate","s","utils","isAddress","height","display","node","node_summary","marginTop","textAlign","name","marginLeft","transactions","DepositStakeV2Transaction","isValidHolderSummary","message","value","sufficientBalance","isValid","moreThanMin","f","lessThanMax","moreThanZero"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/components/transactions/DepositStakeTxForm.js"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ethers } from 'ethers';\nimport * as dnerojs from '@dnerolabs/dnero-js';\nimport FormField from '../../components/FormField';\nimport {\n    formatNativeTokenAmountToLargestUnit,\n    isHolderSummary,\n    isValidAmount,\n    numberWithCommas, toNativeTokenLargestUnit\n} from '../../utils/Utils';\nimport {DDropAsset, DTokenAsset, DneroAsset} from '../../constants/assets';\nimport {getMaxDelegatedStakeAmount, getMaxStakeAmount, getMinStakeAmount, StakePurposeForDDROP} from '../../constants';\nimport FlatButton from \"../buttons/FlatButton\";\nimport BigNumber from \"bignumber.js\";\n\nexport default function DepositStakeTxForm(props) {\n    const {onSubmit, defaultValues, formRef, selectedAccount, assets, chainId, onShowDelegatedSentryNodes} = props;\n    const {register, handleSubmit, errors, watch, setValue} = useForm({\n        mode: 'onChange',\n        defaultValues: defaultValues || {\n            purpose: dnerojs.constants.StakePurpose.StakeForSentry,\n            holder: '',\n            holderSummary: '',\n            amount: '',\n            delegatedSentryNode: null\n        }\n    });\n    React.useEffect(() => {\n        register('delegatedSentryNode');\n    }, [register]);\n    const purpose = parseInt(watch('purpose'));\n    const delegatedSentryNode = watch('delegatedSentryNode');\n    let holderTitle = null;\n    let holderPlaceholder = null;\n    let stakeAmountTitle = null;\n\n    if (purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n        holderTitle = 'Validator Node Holder (Address)';\n        holderPlaceholder = 'Enter validator node address';\n        stakeAmountTitle = 'Dnero Stake Amount';\n    } else if (purpose === dnerojs.constants.StakePurpose.StakeForSentry) {\n        holderTitle = 'Sentry Node Holder (Summary)';\n        holderPlaceholder = 'Enter sentry node summary';\n        stakeAmountTitle = 'Dnero Stake Amount';\n    } else if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n        holderTitle = 'Edge Node Holder (Summary)';\n        holderPlaceholder = 'Enter edge node summary';\n        stakeAmountTitle = 'DToken Stake Amount';\n    } else if (purpose === StakePurposeForDDROP) {\n        holderTitle = null;\n        holderPlaceholder = null;\n        stakeAmountTitle = 'DDrop Stake Amount';\n    }\n    const populateMaxAmount = () => {\n        let amount = '';\n        let max = getMaxStakeAmount(purpose);\n        if(purpose === dnerojs.constants.StakePurpose.StakeForValidator || purpose === dnerojs.constants.StakePurpose.StakeForSentry){\n            amount = toNativeTokenLargestUnit(selectedAccount.balances['dnerowei']).toString(10);\n\n            if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                amount = Math.min(max, parseFloat(amount));\n            } else if (\n                purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                !_.isNil(delegatedSentryNode)) {\n                max = getMaxDelegatedStakeAmount(purpose);\n                amount = Math.min(max, parseFloat(amount));\n            }\n        }\n        else if(purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge){\n            const maxDtokenBN = (new BigNumber(selectedAccount.balances['dtokenwei'])).minus(dnerojs.constants.gasPriceDefault);\n            amount = toNativeTokenLargestUnit(maxDtokenBN.toString(10)).toString(10);\n\n            amount = Math.min(max, parseFloat(amount));\n        }\n        else if(purpose === StakePurposeForDDROP){\n            const dDropAsset = DDropAsset(chainId);\n            const balance = selectedAccount.balances[dDropAsset.address] || '0';\n            amount = toNativeTokenLargestUnit(balance).toString(10);\n        }\n        setValue('amount', amount);\n    }\n\n    return (\n        <form className={'TxForm TxForm--DepositStake'}\n              onSubmit={handleSubmit(onSubmit)}\n              ref={formRef}\n        >\n            <FormField title={'Stake Type'}\n                       error={errors.purpose && 'Stake type is required'}\n            >\n                <select\n                    className={'RoundedInput'}\n                    name={'purpose'}\n                    ref={register({required: true})}\n                >\n                    <option key={'__placeholder__'}\n                            value={''}\n                            disabled>\n                        Select stake type\n                    </option>\n                    <option key={'sentry'}\n                            value={dnerojs.constants.StakePurpose.StakeForSentry}>\n                        Sentry Node\n                    </option>\n                    <option key={'validator'}\n                            value={dnerojs.constants.StakePurpose.StakeForValidator}>\n                        Validator Node\n                    </option>\n                    <option key={'elite-edge'}\n                            value={dnerojs.constants.StakePurpose.StakeForEliteEdge}>\n                        Edge Node\n                    </option>\n                    {\n                        DDropAsset(chainId) &&\n                        <option key={'ddrop'}\n                                value={StakePurposeForDDROP}>\n                            DDROP\n                        </option>\n                    }\n                </select>\n            </FormField>\n\n            {\n                (purpose === dnerojs.constants.StakePurpose.StakeForValidator) &&\n                <FormField title={holderTitle}\n                           error={errors.holder && 'A valid validator address is required'}\n                >\n                    <input name=\"holder\"\n                           className={'RoundedInput'}\n                           placeholder={holderPlaceholder}\n                           ref={register({\n                               required: true,\n                               validate: (s) => ethers.utils.isAddress(s)\n                           })}/>\n                </FormField>\n            }\n\n            {\n                (purpose === dnerojs.constants.StakePurpose.StakeForSentry) &&\n                <FormField title={(delegatedSentryNode ? 'Delegated Sentry Node' : holderTitle)}\n                           error={errors.holderSummary && 'Sentry node summary or delegated sentry node is required'}\n                >\n                    <React.Fragment>\n                        <textarea name=\"holderSummary\"\n                          className={'RoundedInput'}\n                          style={{height: 100, display: (delegatedSentryNode ? 'none' : 'block')}}\n                          placeholder={holderPlaceholder}\n                          ref={register({\n                              required: true,\n                              validate: (s) => isHolderSummary(s)\n                          })}/>\n                        {\n                            _.isNil(delegatedSentryNode) &&\n                            <a onClick={() => {\n                                onShowDelegatedSentryNodes((node) => {\n                                    setValue('holderSummary', node.node_summary);\n                                    setValue('delegatedSentryNode', node);\n                                });\n                            }}\n                               className={'Link'}\n                               style={{marginTop: 8, textAlign: 'left'}}\n                            >\n                                Select Delegated Sentry Node\n                            </a>\n                        }\n                    </React.Fragment>\n                    {\n                        !_.isNil(delegatedSentryNode) &&\n                        <React.Fragment>\n                            <div className={'RoundedInput'}>\n                                <div className={'RoundedInputClearableValue'}>\n                                    <div>{delegatedSentryNode.name}</div>\n                                    <a onClick={() => {\n                                        setValue('holderSummary', null);\n                                        setValue('delegatedSentryNode', null);\n                                    }}\n                                       style={{marginLeft: 'auto'}}\n                                    >\n                                        <img src={'/img/icons/alert-x@2x.png'}/>\n                                    </a>\n                                </div>\n                            </div>\n                        </React.Fragment>\n                    }\n                </FormField>\n            }\n\n\n            {\n                (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) &&\n                <FormField title={holderTitle}\n                           error={errors.holderSummary && 'Edge node summary is required'}\n                >\n          <textarea name=\"holderSummary\"\n                    className={'RoundedInput'}\n                    style={{height: 100}}\n                    placeholder={holderPlaceholder}\n                    ref={register({\n                        required: true,\n                        validate: (s) => dnerojs.transactions.DepositStakeV2Transaction.isValidHolderSummary(purpose, s)\n                    })}/>\n                </FormField>\n            }\n\n            <FormField title={stakeAmountTitle}\n                       error={errors.amount && errors.amount.message}\n            >\n                <div className={'RoundedInputWrapper'}>\n                    <input name=\"amount\"\n                       className={'RoundedInput'}\n                       placeholder={'Enter amount to stake'}\n                       ref={register({\n                           required: {\n                               value: true,\n                               message: 'Stake amount is required'\n                           },\n                           validate: {\n                               sufficientBalance: (s) => {\n                                   let isValid = true;\n                                   if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                                       isValid = isValidAmount(selectedAccount, DTokenAsset, s);\n                                   } else if (\n                                       purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                                       purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n                                       isValid = isValidAmount(selectedAccount, DneroAsset, s);\n                                   } else if (purpose === StakePurposeForDDROP) {\n                                       const dDropAsset = DDropAsset(chainId);\n\n                                       isValid = isValidAmount(selectedAccount, dDropAsset, s);\n                                   }\n\n                                   return isValid ? true : 'Insufficient balance';\n                               },\n                               moreThanMin: (s) => {\n                                   const f = parseFloat(s);\n                                   const min = getMinStakeAmount(purpose);\n                                   if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                                       if(min > f){\n                                           return `Invalid amount. Must be at least ${numberWithCommas(min)} DTOKEN`;\n                                       }\n                                   } else if (\n                                       purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                                       purpose === dnerojs.constants.StakePurpose.StakeForValidator) {\n                                       if(min > f){\n                                           return `Invalid amount. Must be at least ${numberWithCommas(min)} DNERO`;\n                                       }\n                                   }\n                                   return true;\n                               },\n                               lessThanMax: (s) => {\n                                   const f = parseFloat(s);\n                                   let max = getMaxStakeAmount(purpose);\n                                   if (purpose === dnerojs.constants.StakePurpose.StakeForEliteEdge) {\n                                       if(max < f){\n                                           return `Invalid amount. Must be less than ${numberWithCommas(max)} DTOKEN`;\n                                       }\n                                   } else if (\n                                       purpose === dnerojs.constants.StakePurpose.StakeForSentry ||\n                                       !_.isNil(delegatedSentryNode)) {\n                                       max = getMaxDelegatedStakeAmount(purpose);\n                                       if(max < f){\n                                           return `Invalid amount. There's a max of ${numberWithCommas(max)} DNERO for delegated nodes. Please download and run your own Sentry Node to stake more.`;\n                                       }\n                                   }\n                                   return true;\n                               },\n                               moreThanZero: (s) => {\n                                   const f = parseFloat(s);\n\n                                   return (f > 0) ? true : 'Invalid stake amount';\n                               }\n                           }\n                       })}/>\n                       <FlatButton title={'Max'}\n                                   size={'small'}\n                                   className={'RoundedInputButton'}\n                                   onClick={populateMaxAmount}/>\n                </div>\n            </FormField>\n        </form>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}