{"ast":null,"code":"import _slicedToArray from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _asyncToGenerator from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";function _regeneratorRuntime(){\"use strict\";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function _regeneratorRuntime(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol=\"function\"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||\"@@iterator\",asyncIteratorSymbol=$Symbol.asyncIterator||\"@@asyncIterator\",toStringTagSymbol=$Symbol.toStringTag||\"@@toStringTag\";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},\"\");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function(innerFn,self,context){var state=\"suspendedStart\";return function(method,arg){if(\"executing\"===state)throw new Error(\"Generator is already running\");if(\"completed\"===state){if(\"throw\"===method)throw arg;return doneResult();}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if(\"next\"===context.method)context.sent=context._sent=context.arg;else if(\"throw\"===context.method){if(\"suspendedStart\"===state)throw state=\"completed\",context.arg;context.dispatchException(context.arg);}else\"return\"===context.method&&context.abrupt(\"return\",context.arg);state=\"executing\";var record=tryCatch(innerFn,self,context);if(\"normal\"===record.type){if(state=context.done?\"completed\":\"suspendedYield\",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}\"throw\"===record.type&&(state=\"completed\",context.method=\"throw\",context.arg=record.arg);}};}(innerFn,self,context),generator;}function tryCatch(fn,obj,arg){try{return{type:\"normal\",arg:fn.call(obj,arg)};}catch(err){return{type:\"throw\",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){[\"next\",\"throw\",\"return\"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if(\"throw\"!==record.type){var result=record.arg,value=result.value;return value&&\"object\"==typeof value&&hasOwn.call(value,\"__await\")?PromiseImpl.resolve(value.__await).then(function(value){invoke(\"next\",value,resolve,reject);},function(err){invoke(\"throw\",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke(\"throw\",error,resolve,reject);});}reject(record.arg);}var previousPromise;this._invoke=function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();};}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(undefined===method){if(context.delegate=null,\"throw\"===context.method){if(delegate.iterator.return&&(context.method=\"return\",context.arg=undefined,maybeInvokeDelegate(delegate,context),\"throw\"===context.method))return ContinueSentinel;context.method=\"throw\",context.arg=new TypeError(\"The iterator does not provide a 'throw' method\");}return ContinueSentinel;}var record=tryCatch(method,delegate.iterator,context.arg);if(\"throw\"===record.type)return context.method=\"throw\",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,\"return\"!==context.method&&(context.method=\"next\",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method=\"throw\",context.arg=new TypeError(\"iterator result is not an object\"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type=\"normal\",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:\"root\"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if(\"function\"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;){if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;}return next.value=undefined,next.done=!0,next;};return next.next=next;}}return{next:doneResult};}function doneResult(){return{value:undefined,done:!0};}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(Gp,\"constructor\",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,\"constructor\",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,\"GeneratorFunction\"),exports.isGeneratorFunction=function(genFun){var ctor=\"function\"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||\"GeneratorFunction\"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,\"GeneratorFunction\")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,\"Generator\"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,\"toString\",function(){return\"[object Generator]\";}),exports.keys=function(object){var keys=[];for(var key in object){keys.push(key);}return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this){\"t\"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);}},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if(\"throw\"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type=\"throw\",record.arg=exception,context.next=loc,caught&&(context.method=\"next\",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if(\"root\"===entry.tryLoc)return handle(\"end\");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,\"catchLoc\"),hasFinally=hasOwn.call(entry,\"finallyLoc\");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error(\"try statement without catch or finally\");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,\"finallyLoc\")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&(\"break\"===type||\"continue\"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method=\"next\",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if(\"throw\"===record.type)throw record.arg;return\"break\"===record.type||\"continue\"===record.type?this.next=record.arg:\"return\"===record.type?(this.rval=this.arg=record.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if(\"throw\"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error(\"illegal catch attempt\");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},\"next\"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}import _ from'lodash';import ObservableStore from'../utils/ObservableStore';import*as dnerojs from'@dnerolabs/dnero-js';var _require=require('events'),EventEmitter=_require.EventEmitter;var PreferencesController=/*#__PURE__*/function(_EventEmitter){_inherits(PreferencesController,_EventEmitter);var _super=_createSuper(PreferencesController);/**\n     *\n     * @typedef {Object} PreferencesController\n     * @param {Object} opts - Overrides the defaults for the initial state of this.store\n     * @property {Object} store The stored object containing a users preferences, stored in local storage\n     * @property {Array} store.tokens The tokens the user wants display in their token lists\n     * @property {Object} store.accountTokens The tokens stored per account and then per network type\n     * @property {Object} store.assetImages Contains assets objects related to assets added\n     * @property {string} store.selectedAddress A hex string that matches the currently selected address in the app\n     *\n     */function PreferencesController(){var _this;var opts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,PreferencesController);_this=_super.call(this);var initState=_objectSpread({accountTokens:{},assetImages:{},tokens:[],identities:{},lostIdentities:{},preferences:{autoLockTimeLimit:undefined},completedOnboarding:false,selectedAddress:null,network:{chainId:dnerojs.networks.ChainIds.Mainnet},delegatedSentryNodes:[]},opts.initState);_this.store=new ObservableStore(initState);_this.updateDelegatedSentryNodes();return _this;}// PUBLIC METHODS\n_createClass(PreferencesController,[{key:\"getAssetImages\",value:function getAssetImages(){return this.store.getState().assetImages;}/**\n     * Synchronizes identity entries with known accounts.\n     * Removes any unknown identities, and returns the resulting selected address.\n     *\n     * @param {Array<string>} addresses - known to the vault.\n     * @returns {string} selectedAddress the selected address.\n     */},{key:\"syncAddresses\",value:function syncAddresses(addresses){if(!Array.isArray(addresses)||addresses.length===0){throw new Error('Expected non-empty array of addresses.');}var _this$store$getState=this.store.getState(),identities=_this$store$getState.identities,lostIdentities=_this$store$getState.lostIdentities;var newlyLost={};Object.keys(identities).forEach(function(identity){if(!addresses.includes(identity)){newlyLost[identity]=identities[identity];delete identities[identity];}});// Identities are no longer present.\nif(Object.keys(newlyLost).length>0){// store lost accounts\nObject.keys(newlyLost).forEach(function(key){lostIdentities[key]=newlyLost[key];});}this.store.updateState({identities:identities,lostIdentities:lostIdentities});this.addAddresses(addresses);// If the selected account is no longer valid,\n// select an arbitrary other account:\nvar selectedAddr=this.getSelectedAddress();if(!addresses.includes(selectedAddr)){selectedAddr=addresses[0];this.setSelectedAddress(selectedAddr);}return selectedAddr;}/**\n     * Updates identities to only include specified addresses. Removes identities\n     * not included in addresses array\n     *\n     * @param {string[]} addresses - An array of hex addresses\n     *\n     */},{key:\"setAddresses\",value:function setAddresses(addresses){var oldIdentities=this.store.getState().identities;var oldAccountTokens=this.store.getState().accountTokens;var identities=addresses.reduce(function(ids,address,index){var oldId=oldIdentities[address]||{};ids[address]=_objectSpread({name:\"Account \".concat(index+1),address:address},oldId);return ids;},{});var accountTokens=addresses.reduce(function(tokens,address){var oldTokens=oldAccountTokens[address]||{};tokens[address]=oldTokens;return tokens;},{});this.store.updateState({identities:identities,accountTokens:accountTokens});}/**\n     * Removes an address from state\n     *\n     * @param {string} address - A hex address\n     * @returns {string} the address that was removed\n     */},{key:\"removeAddress\",value:function removeAddress(address){var _this$store$getState2=this.store.getState(),identities=_this$store$getState2.identities;var _this$store$getState3=this.store.getState(),accountTokens=_this$store$getState3.accountTokens;if(!identities[address]){throw new Error(\"\".concat(address,\" can't be deleted cause it was not found\"));}delete identities[address];delete accountTokens[address];this.store.updateState({identities:identities,accountTokens:accountTokens});// If the selected account is no longer valid,\n// select an arbitrary other account:\nif(address===this.getSelectedAddress()){var selected=Object.keys(identities)[0];this.setSelectedAddress(selected);}return address;}/**\n     * Adds addresses to the identities object without removing identities\n     *\n     * @param {string[]} addresses - An array of hex addresses\n     *\n     */},{key:\"addAddresses\",value:function addAddresses(addresses){var _this$store$getState4=this.store.getState(),identities=_this$store$getState4.identities,accountTokens=_this$store$getState4.accountTokens;addresses.forEach(function(address){// skip if already exists\nif(identities[address]){return;}// add missing identity\nvar identityCount=Object.keys(identities).length;if(_.isNil(accountTokens[address])){accountTokens[address]={};}identities[address]={name:\"Account \".concat(identityCount+1),address:address};});this.store.updateState({identities:identities,accountTokens:accountTokens});}/**\n     * Setter for the `selectedAddress` property\n     *\n     * @param {string} _address - A new hex address for an account\n     * @returns {Promise<void>} Promise resolves with tokens\n     *\n     */},{key:\"setSelectedAddress\",value:function setSelectedAddress(_address){var address=_address;this._updateTokens(address);var _this$store$getState5=this.store.getState(),identities=_this$store$getState5.identities,tokens=_this$store$getState5.tokens;var selectedIdentity=identities[address];if(!selectedIdentity){throw new Error(\"Identity for '\".concat(address,\" not found\"));}selectedIdentity.lastSelected=Date.now();this.store.updateState({identities:identities,selectedAddress:address});return Promise.resolve(tokens);}/**\n     * Getter for the `selectedAddress` property\n     *\n     * @returns {string} The hex address for the currently selected account\n     *\n     */},{key:\"getSelectedAddress\",value:function getSelectedAddress(){return this.store.getState().selectedAddress;}/**\n     * Contains data about tokens users add to their account.\n     * @typedef {Object} AddedToken\n     * @property {string} address - The hex address for the token contract. Will be all lower cased and hex-prefixed.\n     * @property {string} symbol - The symbol of the token, usually 3 or 4 capitalized letters\n     *  {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#symbol}\n     * @property {boolean} decimals - The number of decimals the token uses.\n     *  {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#decimals}\n     */ /**\n     * A getter for `tokens` and `accountTokens` related states.\n     *\n     * @param {string} [selectedAddress] - A new hex address for an account\n     * @returns {Object.<array, object, string, string>} States to interact with tokens in `accountTokens`\n     *\n     */},{key:\"_getTokenRelatedStates\",value:function _getTokenRelatedStates(selectedAddress){var _this$store$getState6=this.store.getState(),network=_this$store$getState6.network,accountTokens=_this$store$getState6.accountTokens;var chainId=network.chainId;if(!selectedAddress){// eslint-disable-next-line no-param-reassign\nselectedAddress=this.store.getState().selectedAddress;}if(!(selectedAddress in accountTokens)){accountTokens[selectedAddress]={};}if(!(chainId in accountTokens[selectedAddress])){accountTokens[selectedAddress][chainId]=[];}var tokens=accountTokens[selectedAddress][chainId];return{tokens:tokens,accountTokens:accountTokens,network:network,selectedAddress:selectedAddress};}/**\n     * Updates `tokens` of current account and network.\n     *\n     * @param {string} selectedAddress - Account address to be updated with.\n     *\n     */},{key:\"_updateTokens\",value:function _updateTokens(selectedAddress){var _this$_getTokenRelate=this._getTokenRelatedStates(selectedAddress),tokens=_this$_getTokenRelate.tokens;this.store.updateState({tokens:tokens});}/**\n     * Updates `accountTokens` and `tokens` of current account and network according to it.\n     *\n     * @param {Array} tokens - Array of tokens to be updated.\n     *\n     */},{key:\"_updateAccountTokens\",value:function _updateAccountTokens(tokens,assetImages){var _this$_getTokenRelate2=this._getTokenRelatedStates(),accountTokens=_this$_getTokenRelate2.accountTokens,network=_this$_getTokenRelate2.network,selectedAddress=_this$_getTokenRelate2.selectedAddress;accountTokens[selectedAddress][network.chainId]=tokens;this.store.updateState({accountTokens:accountTokens,tokens:tokens,assetImages:assetImages});this.emit('accountTokensUpdated');}/**\n     * Adds a new token to the token array, or updates the token if passed an address that already exists.\n     * Modifies the existing tokens array from the store. All objects in the tokens array array AddedToken objects.\n     * @see AddedToken {@link AddedToken}\n     *\n     * @param {string} rawAddress - Hex address of the token contract. May or may not be a checksum address.\n     * @param {string} symbol - The symbol of the token\n     * @param {number} decimals - The number of decimals the token uses.\n     * @param {string} image - The url for the token asset.\n     * @returns {Promise<array>} Promises the new array of AddedToken objects.\n     *\n     */},{key:\"addToken\",value:function(){var _addToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(rawAddress,symbol,decimals,image){var address,newEntry,_this$store$getState7,tokens,assetImages,previousEntry,previousIndex;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:address=rawAddress;newEntry={address:address,symbol:symbol,decimals:decimals};_this$store$getState7=this.store.getState(),tokens=_this$store$getState7.tokens;assetImages=this.getAssetImages();previousEntry=tokens.find(function(token){return token.address===address;});previousIndex=tokens.indexOf(previousEntry);if(previousEntry){tokens[previousIndex]=newEntry;}else{tokens.push(newEntry);}assetImages[address]=image;this._updateAccountTokens(tokens,assetImages);return _context.abrupt(\"return\",Promise.resolve(tokens));case 10:case\"end\":return _context.stop();}}},_callee,this);}));function addToken(_x,_x2,_x3,_x4){return _addToken.apply(this,arguments);}return addToken;}()/**\n     * Removes a specified token from the tokens array.\n     *\n     * @param {string} rawAddress - Hex address of the token contract to remove.\n     * @returns {Promise<array>} The new array of AddedToken objects\n     *\n     */},{key:\"removeToken\",value:function removeToken(rawAddress){var _this$store$getState8=this.store.getState(),tokens=_this$store$getState8.tokens;var assetImages=this.getAssetImages();var updatedTokens=tokens.filter(function(token){return token.address!==rawAddress;});delete assetImages[rawAddress];this._updateAccountTokens(updatedTokens,assetImages);return Promise.resolve(updatedTokens);}/**\n     * A getter for the `tokens` property\n     *\n     * @returns {Array} The current array of AddedToken objects\n     *\n     */},{key:\"getTokens\",value:function getTokens(){return this.store.getState().tokens;}/**\n     * Sets a custom label for an account\n     * @param {string} account - the account to set a label for\n     * @param {string} name - the custom name for the account\n     * @returns {Promise<string>}\n     */},{key:\"setAccountName\",value:function setAccountName(account,name){if(!account){throw new Error(\"setAccountLabel requires a valid address, got \".concat(String(account)));}var address=account;var _this$store$getState9=this.store.getState(),identities=_this$store$getState9.identities;identities[address]=identities[address]||{};identities[address].name=name;this.store.updateState({identities:identities});return Promise.resolve(name);}/**\n     * Updates the `preferences` property, which is an object. These are user-controlled features\n     * found in the settings page.\n     * @param {string} preference - The preference to enable or disable.\n     * @param {boolean} value - Indicates whether or not the preference should be enabled or disabled.\n     * @returns {Promise<object>} Promises a new object; the updated preferences object.\n     */},{key:\"setPreference\",value:function setPreference(preference,value){var currentPreferences=this.getPreferences();var updatedPreferences=_objectSpread(_objectSpread({},currentPreferences),{},_defineProperty({},preference,value));this.store.updateState({preferences:updatedPreferences});return Promise.resolve(updatedPreferences);}/**\n     * A getter for the `preferences` property\n     * @returns {Object} A key-boolean map of user-selected preferences.\n     */},{key:\"getPreferences\",value:function getPreferences(){return this.store.getState().preferences;}/**\n     * Sets the completedOnboarding state to true, indicating that the user has completed the\n     * onboarding process.\n     */},{key:\"completeOnboarding\",value:function completeOnboarding(){this.store.updateState({completedOnboarding:true});return Promise.resolve(true);}/**\n     * Updates the `network` property.\n     * @param {object} network - {chainId: String}\n     * @returns {Promise<Boolean>} Promises a new object; the updated preferences object.\n     */},{key:\"setNetwork\",value:function setNetwork(network){if(network.chainId===undefined||network.chainId===null){throw new Error('PreferencesController :: setNetwork - network is invalid');}this.store.updateState({network:network});this._updateTokens(this.getSelectedAddress());this.emit('networkChanged',network);return Promise.resolve(true);}/**\n     * A getter for the `network` property\n     * @returns {Object}\n     */},{key:\"getNetwork\",value:function getNetwork(){return this.store.getState().network;}/**\n     * Calls API to get the delegated sentry nodes\n     * @returns {Object}\n     */},{key:\"updateDelegatedSentryNodes\",value:function(){var _updateDelegatedSentryNodes=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var delegatedSentryNodes,url,response,responseJson;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:delegatedSentryNodes=null;_context2.prev=1;//const url = `https://api.dnerochain.org/v1/sentry/delegated-nodes`;\nurl=\"http://143.198.132.249:7554/api/v1/sentry/delegated-nodes\";_context2.next=5;return fetch(url);case 5:response=_context2.sent;_context2.next=8;return response.json();case 8:responseJson=_context2.sent;delegatedSentryNodes=responseJson;delegatedSentryNodes=_.map(delegatedSentryNodes,function(node){var _node$address$split=node.address.split(' fee - '),_node$address$split2=_slicedToArray(_node$address$split,2),fee=_node$address$split2[0],address=_node$address$split2[1];return _objectSpread(_objectSpread({},node),{},{fee:fee,address:address});});_context2.next=16;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](1);return _context2.abrupt(\"return\",[]);case 16:// Update states\nthis.store.updateState({delegatedSentryNodes:delegatedSentryNodes});return _context2.abrupt(\"return\",delegatedSentryNodes);case 18:case\"end\":return _context2.stop();}}},_callee2,this,[[1,13]]);}));function updateDelegatedSentryNodes(){return _updateDelegatedSentryNodes.apply(this,arguments);}return updateDelegatedSentryNodes;}()}]);return PreferencesController;}(EventEmitter);export{PreferencesController as default};","map":{"version":3,"names":["_","ObservableStore","dnerojs","require","EventEmitter","PreferencesController","opts","initState","accountTokens","assetImages","tokens","identities","lostIdentities","preferences","autoLockTimeLimit","undefined","completedOnboarding","selectedAddress","network","chainId","networks","ChainIds","Mainnet","delegatedSentryNodes","store","updateDelegatedSentryNodes","getState","addresses","Array","isArray","length","Error","newlyLost","Object","keys","forEach","identity","includes","key","updateState","addAddresses","selectedAddr","getSelectedAddress","setSelectedAddress","oldIdentities","oldAccountTokens","reduce","ids","address","index","oldId","name","oldTokens","selected","identityCount","isNil","_address","_updateTokens","selectedIdentity","lastSelected","Date","now","Promise","resolve","_getTokenRelatedStates","emit","rawAddress","symbol","decimals","image","newEntry","getAssetImages","previousEntry","find","token","previousIndex","indexOf","push","_updateAccountTokens","updatedTokens","filter","account","String","preference","value","currentPreferences","getPreferences","updatedPreferences","url","fetch","response","json","responseJson","map","node","split","fee"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/controllers/preferences.js"],"sourcesContent":["import _ from 'lodash';\nimport ObservableStore from '../utils/ObservableStore';\nimport * as dnerojs from '@dnerolabs/dnero-js';\n\nconst { EventEmitter } = require('events');\n\nexport default class PreferencesController  extends EventEmitter {\n    /**\n     *\n     * @typedef {Object} PreferencesController\n     * @param {Object} opts - Overrides the defaults for the initial state of this.store\n     * @property {Object} store The stored object containing a users preferences, stored in local storage\n     * @property {Array} store.tokens The tokens the user wants display in their token lists\n     * @property {Object} store.accountTokens The tokens stored per account and then per network type\n     * @property {Object} store.assetImages Contains assets objects related to assets added\n     * @property {string} store.selectedAddress A hex string that matches the currently selected address in the app\n     *\n     */\n    constructor(opts = {}) {\n        super();\n\n        const initState = {\n            accountTokens: {},\n            assetImages: {},\n            tokens: [],\n\n            identities: {},\n            lostIdentities: {},\n\n            preferences: {\n                autoLockTimeLimit: undefined,\n            },\n            completedOnboarding: false,\n\n            selectedAddress: null,\n\n            network: {\n                chainId: dnerojs.networks.ChainIds.Mainnet,\n            },\n\n            delegatedSentryNodes: [],\n\n            ...opts.initState,\n        };\n\n        this.store = new ObservableStore(initState);\n\n        this.updateDelegatedSentryNodes();\n    }\n\n\n    // PUBLIC METHODS\n\n    getAssetImages() {\n        return this.store.getState().assetImages;\n    }\n\n    /**\n     * Synchronizes identity entries with known accounts.\n     * Removes any unknown identities, and returns the resulting selected address.\n     *\n     * @param {Array<string>} addresses - known to the vault.\n     * @returns {string} selectedAddress the selected address.\n     */\n    syncAddresses(addresses) {\n        if (!Array.isArray(addresses) || addresses.length === 0) {\n            throw new Error('Expected non-empty array of addresses.');\n        }\n\n        const { identities, lostIdentities } = this.store.getState();\n\n        const newlyLost = {};\n        Object.keys(identities).forEach((identity) => {\n            if (!addresses.includes(identity)) {\n                newlyLost[identity] = identities[identity];\n                delete identities[identity];\n            }\n        });\n\n        // Identities are no longer present.\n        if (Object.keys(newlyLost).length > 0) {\n            // store lost accounts\n            Object.keys(newlyLost).forEach((key) => {\n                lostIdentities[key] = newlyLost[key];\n            });\n        }\n\n        this.store.updateState({ identities, lostIdentities });\n        this.addAddresses(addresses);\n\n        // If the selected account is no longer valid,\n        // select an arbitrary other account:\n        let selectedAddr = this.getSelectedAddress();\n        if (!addresses.includes(selectedAddr)) {\n            selectedAddr = addresses[0];\n            this.setSelectedAddress(selectedAddr);\n        }\n\n        return selectedAddr;\n    }\n\n    /**\n     * Updates identities to only include specified addresses. Removes identities\n     * not included in addresses array\n     *\n     * @param {string[]} addresses - An array of hex addresses\n     *\n     */\n    setAddresses(addresses) {\n        const oldIdentities = this.store.getState().identities;\n        const oldAccountTokens = this.store.getState().accountTokens;\n\n        const identities = addresses.reduce((ids, address, index) => {\n            const oldId = oldIdentities[address] || {};\n            ids[address] = { name: `Account ${index + 1}`, address, ...oldId };\n            return ids;\n        }, {});\n        const accountTokens = addresses.reduce((tokens, address) => {\n            const oldTokens = oldAccountTokens[address] || {};\n            tokens[address] = oldTokens;\n            return tokens;\n        }, {});\n        this.store.updateState({ identities, accountTokens });\n    }\n\n    /**\n     * Removes an address from state\n     *\n     * @param {string} address - A hex address\n     * @returns {string} the address that was removed\n     */\n    removeAddress(address) {\n        const { identities } = this.store.getState();\n        const { accountTokens } = this.store.getState();\n        if (!identities[address]) {\n            throw new Error(`${address} can't be deleted cause it was not found`);\n        }\n        delete identities[address];\n        delete accountTokens[address];\n        this.store.updateState({ identities, accountTokens });\n\n        // If the selected account is no longer valid,\n        // select an arbitrary other account:\n        if (address === this.getSelectedAddress()) {\n            const selected = Object.keys(identities)[0];\n            this.setSelectedAddress(selected);\n        }\n        return address;\n    }\n\n    /**\n     * Adds addresses to the identities object without removing identities\n     *\n     * @param {string[]} addresses - An array of hex addresses\n     *\n     */\n    addAddresses(addresses) {\n        const { identities, accountTokens } = this.store.getState();\n        addresses.forEach((address) => {\n            // skip if already exists\n            if (identities[address]) {\n                return;\n            }\n            // add missing identity\n            const identityCount = Object.keys(identities).length;\n\n            if(_.isNil(accountTokens[address])){\n                accountTokens[address] = {};\n            }\n\n            identities[address] = { name: `Account ${identityCount + 1}`, address };\n        });\n        this.store.updateState({ identities, accountTokens });\n    }\n\n    /**\n     * Setter for the `selectedAddress` property\n     *\n     * @param {string} _address - A new hex address for an account\n     * @returns {Promise<void>} Promise resolves with tokens\n     *\n     */\n    setSelectedAddress(_address) {\n        const address = _address;\n        this._updateTokens(address);\n\n        const { identities, tokens } = this.store.getState();\n        const selectedIdentity = identities[address];\n        if (!selectedIdentity) {\n            throw new Error(`Identity for '${address} not found`);\n        }\n\n        selectedIdentity.lastSelected = Date.now();\n        this.store.updateState({ identities, selectedAddress: address });\n        return Promise.resolve(tokens);\n    }\n\n    /**\n     * Getter for the `selectedAddress` property\n     *\n     * @returns {string} The hex address for the currently selected account\n     *\n     */\n    getSelectedAddress() {\n        return this.store.getState().selectedAddress;\n    }\n\n    /**\n     * Contains data about tokens users add to their account.\n     * @typedef {Object} AddedToken\n     * @property {string} address - The hex address for the token contract. Will be all lower cased and hex-prefixed.\n     * @property {string} symbol - The symbol of the token, usually 3 or 4 capitalized letters\n     *  {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#symbol}\n     * @property {boolean} decimals - The number of decimals the token uses.\n     *  {@link https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#decimals}\n     */\n\n    /**\n     * A getter for `tokens` and `accountTokens` related states.\n     *\n     * @param {string} [selectedAddress] - A new hex address for an account\n     * @returns {Object.<array, object, string, string>} States to interact with tokens in `accountTokens`\n     *\n     */\n    _getTokenRelatedStates(selectedAddress) {\n        const { network, accountTokens } = this.store.getState();\n        const chainId = network.chainId;\n\n        if (!selectedAddress) {\n            // eslint-disable-next-line no-param-reassign\n            selectedAddress = this.store.getState().selectedAddress;\n        }\n        if (!(selectedAddress in accountTokens)) {\n            accountTokens[selectedAddress] = {};\n        }\n        if (!(chainId in accountTokens[selectedAddress])) {\n            accountTokens[selectedAddress][chainId] = [];\n        }\n        const tokens = accountTokens[selectedAddress][chainId];\n        return { tokens, accountTokens, network, selectedAddress };\n    }\n\n    /**\n     * Updates `tokens` of current account and network.\n     *\n     * @param {string} selectedAddress - Account address to be updated with.\n     *\n     */\n    _updateTokens(selectedAddress) {\n        const { tokens } = this._getTokenRelatedStates(selectedAddress);\n        this.store.updateState({ tokens });\n    }\n\n    /**\n     * Updates `accountTokens` and `tokens` of current account and network according to it.\n     *\n     * @param {Array} tokens - Array of tokens to be updated.\n     *\n     */\n    _updateAccountTokens(tokens, assetImages) {\n        const {\n            accountTokens,\n            network,\n            selectedAddress,\n        } = this._getTokenRelatedStates();\n        accountTokens[selectedAddress][network.chainId] = tokens;\n        this.store.updateState({ accountTokens, tokens, assetImages });\n\n        this.emit('accountTokensUpdated');\n    }\n\n    /**\n     * Adds a new token to the token array, or updates the token if passed an address that already exists.\n     * Modifies the existing tokens array from the store. All objects in the tokens array array AddedToken objects.\n     * @see AddedToken {@link AddedToken}\n     *\n     * @param {string} rawAddress - Hex address of the token contract. May or may not be a checksum address.\n     * @param {string} symbol - The symbol of the token\n     * @param {number} decimals - The number of decimals the token uses.\n     * @param {string} image - The url for the token asset.\n     * @returns {Promise<array>} Promises the new array of AddedToken objects.\n     *\n     */\n    async addToken(rawAddress, symbol, decimals, image) {\n        const address = rawAddress;\n        const newEntry = { address, symbol, decimals };\n        const { tokens } = this.store.getState();\n        const assetImages = this.getAssetImages();\n        const previousEntry = tokens.find((token) => {\n            return token.address === address;\n        });\n        const previousIndex = tokens.indexOf(previousEntry);\n\n        if (previousEntry) {\n            tokens[previousIndex] = newEntry;\n        } else {\n            tokens.push(newEntry);\n        }\n        assetImages[address] = image;\n        this._updateAccountTokens(tokens, assetImages);\n        return Promise.resolve(tokens);\n    }\n\n    /**\n     * Removes a specified token from the tokens array.\n     *\n     * @param {string} rawAddress - Hex address of the token contract to remove.\n     * @returns {Promise<array>} The new array of AddedToken objects\n     *\n     */\n    removeToken(rawAddress) {\n        const { tokens } = this.store.getState();\n        const assetImages = this.getAssetImages();\n        const updatedTokens = tokens.filter((token) => token.address !== rawAddress);\n        delete assetImages[rawAddress];\n        this._updateAccountTokens(updatedTokens, assetImages);\n        return Promise.resolve(updatedTokens);\n    }\n\n    /**\n     * A getter for the `tokens` property\n     *\n     * @returns {Array} The current array of AddedToken objects\n     *\n     */\n    getTokens() {\n        return this.store.getState().tokens;\n    }\n\n    /**\n     * Sets a custom label for an account\n     * @param {string} account - the account to set a label for\n     * @param {string} name - the custom name for the account\n     * @returns {Promise<string>}\n     */\n    setAccountName(account, name) {\n        if (!account) {\n            throw new Error(\n                `setAccountLabel requires a valid address, got ${String(account)}`,\n            );\n        }\n        const address = account;\n        const { identities } = this.store.getState();\n        identities[address] = identities[address] || {};\n        identities[address].name = name;\n        this.store.updateState({ identities });\n        return Promise.resolve(name);\n    }\n\n    /**\n     * Updates the `preferences` property, which is an object. These are user-controlled features\n     * found in the settings page.\n     * @param {string} preference - The preference to enable or disable.\n     * @param {boolean} value - Indicates whether or not the preference should be enabled or disabled.\n     * @returns {Promise<object>} Promises a new object; the updated preferences object.\n     */\n    setPreference(preference, value) {\n        const currentPreferences = this.getPreferences();\n        const updatedPreferences = {\n            ...currentPreferences,\n            [preference]: value,\n        };\n\n        this.store.updateState({ preferences: updatedPreferences });\n        return Promise.resolve(updatedPreferences);\n    }\n\n    /**\n     * A getter for the `preferences` property\n     * @returns {Object} A key-boolean map of user-selected preferences.\n     */\n    getPreferences() {\n        return this.store.getState().preferences;\n    }\n\n    /**\n     * Sets the completedOnboarding state to true, indicating that the user has completed the\n     * onboarding process.\n     */\n    completeOnboarding() {\n        this.store.updateState({ completedOnboarding: true });\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Updates the `network` property.\n     * @param {object} network - {chainId: String}\n     * @returns {Promise<Boolean>} Promises a new object; the updated preferences object.\n     */\n    setNetwork(network) {\n        if(network.chainId === undefined || network.chainId === null){\n            throw new Error('PreferencesController :: setNetwork - network is invalid');\n        }\n\n        this.store.updateState({ network: network });\n\n        this._updateTokens(this.getSelectedAddress());\n\n        this.emit('networkChanged', network);\n\n        return Promise.resolve(true);\n    }\n\n    /**\n     * A getter for the `network` property\n     * @returns {Object}\n     */\n    getNetwork() {\n        return this.store.getState().network;\n    }\n\n    /**\n     * Calls API to get the delegated sentry nodes\n     * @returns {Object}\n     */\n    async updateDelegatedSentryNodes(){\n        let delegatedSentryNodes = null;\n\n        try {\n            //const url = `https://api.dnerochain.org/v1/sentry/delegated-nodes`;\n            const url = `http://143.198.132.249:7554/api/v1/sentry/delegated-nodes`;\n            const response = await fetch(url);\n            const responseJson = await response.json();\n            delegatedSentryNodes = responseJson;\n            delegatedSentryNodes = _.map(delegatedSentryNodes, (node) => {\n                const [fee, address] = node.address.split(' fee - ');\n\n                return {\n                    ...node,\n                    fee: fee,\n                    address: address\n                };\n            });\n        }\n        catch (e) {\n            // No Update\n            return [];\n        }\n\n        // Update states\n        this.store.updateState({ delegatedSentryNodes });\n\n        return delegatedSentryNodes;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}