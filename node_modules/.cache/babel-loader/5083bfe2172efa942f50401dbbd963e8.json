{"ast":null,"code":"import*as actionTypes from\"../types/Wallet\";import{zipMap}from\"../../utils/Utils\";import Config from'../../Config';var INITIAL_STATE={dneroWallet:null,network:Config.defaultDneroChainID,isFetchingBalances:false,isFetchingEthereumBalances:false,address:null,name:null,//Dnero\nbalances:[],balancesByType:{},balancesRefreshedAt:null,//Legacy\nethereumBalances:[],ethereumBalancesByType:{}};export var walletReducer=function walletReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INITIAL_STATE;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case actionTypes.SET_NETWORK:{return Object.assign({},state,{network:action.network});}case actionTypes.FETCH_WALLET_ETHEREUM_BALANCES_START:{return Object.assign({},state,{isFetchingEthereumBalances:true});}case actionTypes.FETCH_WALLET_ETHEREUM_BALANCES_END:{return Object.assign({},state,{isFetchingEthereumBalances:false});}case actionTypes.FETCH_WALLET_ETHEREUM_BALANCES_SUCCESS:{var body=action.response.body;var balances=body.balances;return Object.assign({},state,{ethereumBalances:balances,ethereumBalancesByType:zipMap(balances.map(function(_ref){var type=_ref.type;return type;}),balances.map(function(_ref2){var value=_ref2.value;return value;}))});}case actionTypes.FETCH_WALLET_BALANCES_START:{return Object.assign({},state,{isFetchingBalances:true});}case actionTypes.FETCH_WALLET_BALANCES_END:{return Object.assign({},state,{isFetchingBalances:false});}case actionTypes.FETCH_WALLET_BALANCES_SUCCESS:{var _body=action.response.body;var _balances=_body.balances;return Object.assign({},state,{balances:_balances,balancesByType:zipMap(_balances.map(function(_ref3){var type=_ref3.type;return type;}),_balances.map(function(_ref4){var value=_ref4.value;return value;})),balancesRefreshedAt:new Date()});}case actionTypes.SET_WALLET_ADDRESS:{return Object.assign({},state,{address:action.address});}//Reset all state (useful when recovering a wallet which may have another wallet's state stored in memory))\ncase actionTypes.RESET:{return INITIAL_STATE;}default:{return state;}}};","map":{"version":3,"names":["actionTypes","zipMap","Config","INITIAL_STATE","dneroWallet","network","defaultDneroChainID","isFetchingBalances","isFetchingEthereumBalances","address","name","balances","balancesByType","balancesRefreshedAt","ethereumBalances","ethereumBalancesByType","walletReducer","state","action","type","SET_NETWORK","Object","assign","FETCH_WALLET_ETHEREUM_BALANCES_START","FETCH_WALLET_ETHEREUM_BALANCES_END","FETCH_WALLET_ETHEREUM_BALANCES_SUCCESS","body","response","map","value","FETCH_WALLET_BALANCES_START","FETCH_WALLET_BALANCES_END","FETCH_WALLET_BALANCES_SUCCESS","Date","SET_WALLET_ADDRESS","RESET"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/state/reducers/Wallet.js"],"sourcesContent":["import * as actionTypes from \"../types/Wallet\";\nimport { zipMap } from \"../../utils/Utils\";\nimport Config from '../../Config';\n\nconst INITIAL_STATE = {\n    dneroWallet: null,\n\n    network: Config.defaultDneroChainID,\n\n    isFetchingBalances : false,\n    isFetchingEthereumBalances : false,\n\n    address: null,\n    name: null,\n\n    //Dnero\n    balances: [],\n    balancesByType: {},\n    balancesRefreshedAt: null,\n\n    //Legacy\n    ethereumBalances:[],\n    ethereumBalancesByType: {},\n};\n\nexport const walletReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.SET_NETWORK:{\n            return Object.assign({}, state, {\n                network: action.network\n            });\n        }\n        case actionTypes.FETCH_WALLET_ETHEREUM_BALANCES_START:{\n            return Object.assign({}, state, {\n                isFetchingEthereumBalances: true\n            });\n        }\n        case actionTypes.FETCH_WALLET_ETHEREUM_BALANCES_END:{\n            return Object.assign({}, state, {\n                isFetchingEthereumBalances: false\n            });\n        }\n        case actionTypes.FETCH_WALLET_ETHEREUM_BALANCES_SUCCESS:{\n            let body = action.response.body;\n            let balances = body.balances;\n\n            return Object.assign({}, state, {\n                ethereumBalances: balances,\n                ethereumBalancesByType: zipMap(balances.map(({ type }) => type), balances.map(({ value }) => value))\n            });\n        }\n\n        case actionTypes.FETCH_WALLET_BALANCES_START:{\n            return Object.assign({}, state, {\n                isFetchingBalances: true\n            });\n        }\n        case actionTypes.FETCH_WALLET_BALANCES_END:{\n            return Object.assign({}, state, {\n                isFetchingBalances: false\n            });\n        }\n        case actionTypes.FETCH_WALLET_BALANCES_SUCCESS:{\n            let body = action.response.body;\n            let balances = body.balances;\n\n            return Object.assign({}, state, {\n                balances: balances,\n                balancesByType: zipMap(balances.map(({ type }) => type), balances.map(({ value }) => value)),\n                balancesRefreshedAt: new Date()\n            });\n        }\n\n        case actionTypes.SET_WALLET_ADDRESS:{\n            return Object.assign({}, state, {\n                address: action.address\n            });\n        }\n\n        //Reset all state (useful when recovering a wallet which may have another wallet's state stored in memory))\n        case actionTypes.RESET:{\n            return INITIAL_STATE;\n        }\n\n        default:{\n            return state\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}