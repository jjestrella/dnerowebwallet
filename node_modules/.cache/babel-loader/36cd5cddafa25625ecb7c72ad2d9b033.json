{"ast":null,"code":"import _slicedToArray from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _inherits from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _classCallCheck from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jjestrella/DNERO_Protocol/dnerowebwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import isString from'lodash/isString';import isNumber from'lodash/isNumber';import BigNumber from'bignumber.js';import Bytes from'eth-lib/lib/bytes';import RLP from'eth-lib/lib/rlp';import Hash from'eth-lib/lib/hash';var Tx=/*#__PURE__*/function(){function Tx(){_classCallCheck(this,Tx);}_createClass(Tx,[{key:\"signBytes\",value:function signBytes(chainID){}},{key:\"getType\",value:function getType(){}},{key:\"rlpInput\",value:function rlpInput(){}}]);return Tx;}();// /**\n//  * Check if string is HEX, requires a 0x in front\n//  *\n//  * @method isHexStrict\n//  *\n//  * @param {String} hex to be checked\n//  *\n//  * @returns {Boolean}\n//  */\nvar isHexStrict=function isHexStrict(hex){return(isString(hex)||isNumber(hex))&&/^(-)?0x[0-9a-f]*$/i.test(hex);};/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n *\n * @param {String} hex\n *\n * @returns {Array} the byte array\n */var hexToBytes=function hexToBytes(hex){hex=hex.toString(16);if(!isHexStrict(hex)){throw new Error(\"Given value \\\"\".concat(hex,\"\\\" is not a valid hex string.\"));}hex=hex.replace(/^0x/i,'');hex=hex.length%2?'0'+hex:hex;var bytes=[];for(var c=0;c<hex.length;c+=2){bytes.push(parseInt(hex.substr(c,2),16));}return bytes;};// Convert a byte array to a hex string\nvar bytesToHex=function bytesToHex(bytes){for(var hex=[],i=0;i<bytes.length;i++){hex.push((bytes[i]>>>4).toString(16));hex.push((bytes[i]&0xF).toString(16));}return hex.join(\"\");};BigNumber.prototype.pad=function(size){var s=String(this);while(s.length<(size||2)){s=\"0\"+s;}return s;};var bnFromString=function bnFromString(str){var base=str.slice(0,2)===\"0x\"?16:10;var bigNum=new BigNumber(str,base);var bigNumWithPad=\"0x\"+bigNum.pad(2);return bigNumWithPad;// Jieyi: return \"0x00\" instead of \"0x\" to be compatible with the Golang/Java signature\n};var encodeWei=function encodeWei(wei){if(wei===null||wei===undefined){return Bytes.fromNat(\"0x0\");}else if(wei.isEqualTo(new BigNumber(0))){return Bytes.fromNat(\"0x0\");}else{return Bytes.fromNumber(wei);}};var Coins=/*#__PURE__*/function(){function Coins(dneroWei,dtokenWei){_classCallCheck(this,Coins);this.dneroWei=dneroWei;this.dtokenWei=dtokenWei;}// encodeWei(wei){\n//     if(wei === null || wei === undefined){\n//         return Bytes.fromNat(\"0x0\");\n//     }\n//     else if(wei.isEqualTo(new BigNumber(0))){\n//         return Bytes.fromNat(\"0x0\");\n//     }\n//     else{\n//         return Bytes.fromNumber(wei);\n//     }\n// }\n_createClass(Coins,[{key:\"rlpInput\",value:function rlpInput(){var rlpInput=[encodeWei(this.dneroWei),encodeWei(this.dtokenWei)//(this.dneroWei.isEqualTo(new BigNumber(0))) ? Bytes.fromNat(\"0x0\") : Bytes.fromNumber(this.dneroWei),\n//(this.dtokenWei.isEqualTo(new BigNumber(0))) ? Bytes.fromNat(\"0x0\") : Bytes.fromNumber(this.dtokenWei)\n];return rlpInput;}}]);return Coins;}();var TxInput=/*#__PURE__*/function(){function TxInput(address,dneroWei,dtokenWei,sequence){_classCallCheck(this,TxInput);this.address=address;this.sequence=sequence;this.signature=\"\";if(dneroWei||dtokenWei){this.coins=new Coins(dneroWei,dtokenWei);}else{//TODO should this be undefined or null?\nthis.coins=new Coins(null,null);}}_createClass(TxInput,[{key:\"setSignature\",value:function setSignature(signature){this.signature=signature;}},{key:\"rlpInput\",value:function rlpInput(){var address=null;if(this.address){address=this.address.toLowerCase();}else{address=Bytes.fromNat(\"0x0\");}var rplInput=[address,this.coins.rlpInput(),Bytes.fromNumber(this.sequence),this.signature];return rplInput;}}]);return TxInput;}();var TxOutput=/*#__PURE__*/function(){function TxOutput(address,dneroWei,dtokenWei){_classCallCheck(this,TxOutput);this.address=address;if(dneroWei||dtokenWei){this.coins=new Coins(dneroWei,dtokenWei);}else{//TODO should this be undefined or null?\nthis.coins=new Coins(null,null);}}_createClass(TxOutput,[{key:\"rlpInput\",value:function rlpInput(){var address=null;if(this.address){address=this.address.toLowerCase();}else{//Empty address\naddress=\"0x0000000000000000000000000000000000000000\";}var rplInput=[address,this.coins.rlpInput()];return rplInput;}}]);return TxOutput;}();var TxType={TxTypeCoinbase:0,TxTypeSlash:1,TxTypeSend:2,TxTypeReserveFund:3,TxTypeReleaseFund:4,TxTypeServicePayment:5,TxTypeSplitRule:6,TxTypeSmartContract:7,TxTypeDepositStake:8,TxTypeWithdrawStake:9,TxTypeDepositStakeV2:10};var EthereumTx=/*#__PURE__*/function(){function EthereumTx(payload){_classCallCheck(this,EthereumTx);this.nonce=\"0x0\";this.gasPrice=\"0x0\";this.gas=\"0x0\";this.to=\"0x0000000000000000000000000000000000000000\";this.value=\"0x0\";this.input=payload;}_createClass(EthereumTx,[{key:\"rlpInput\",value:function rlpInput(){var rplInput=[Bytes.fromNat(this.nonce),Bytes.fromNat(this.gasPrice),Bytes.fromNat(this.gas),this.to.toLowerCase(),Bytes.fromNat(this.value),this.input];return rplInput;}}]);return EthereumTx;}();var SendTx=/*#__PURE__*/function(_Tx){_inherits(SendTx,_Tx);var _super=_createSuper(SendTx);function SendTx(senderAddr,outputs,feeInDTokenWei,senderSequence){var _this;_classCallCheck(this,SendTx);_this=_super.call(this);var totalDneroWeiBN=new BigNumber(0);var totalDtokenWeiBN=new BigNumber(0);var feeInDTokenWeiBN=BigNumber.isBigNumber(feeInDTokenWei)?feeInDTokenWei:new BigNumber(feeInDTokenWei);for(var i=0;i<outputs.length;i++){var output=outputs[i];var dneroWei=output.dneroWei;var dtokenWei=output.dtokenWei;var dneroWeiBN=BigNumber.isBigNumber(dneroWei)?dneroWei:new BigNumber(dneroWei);var dtokenWeiBN=BigNumber.isBigNumber(dtokenWei)?dtokenWei:new BigNumber(dtokenWei);totalDneroWeiBN=totalDneroWeiBN.plus(dneroWeiBN);totalDtokenWeiBN=totalDtokenWeiBN.plus(dtokenWeiBN);}_this.fee=new Coins(new BigNumber(0),feeInDTokenWeiBN);var txInput=new TxInput(senderAddr,totalDneroWeiBN,totalDtokenWeiBN.plus(feeInDTokenWeiBN),senderSequence);_this.inputs=[txInput];_this.outputs=[];for(var j=0;j<outputs.length;j++){var _output=outputs[j];var address=_output.address;var _dneroWei=_output.dneroWei;var _dtokenWei=_output.dtokenWei;var _dneroWeiBN=BigNumber.isBigNumber(_dneroWei)?_dneroWei:new BigNumber(_dneroWei);var _dtokenWeiBN=BigNumber.isBigNumber(_dtokenWei)?_dtokenWei:new BigNumber(_dtokenWei);var txOutput=new TxOutput(address,_dneroWeiBN,_dtokenWeiBN);_this.outputs.push(txOutput);}return _this;}_createClass(SendTx,[{key:\"setSignature\",value:function setSignature(signature){//TODO support multiple inputs\nvar input=this.inputs[0];input.setSignature(signature);}},{key:\"signBytes\",value:function signBytes(chainID){var sigz=[];//let input = this.inputs[0];\n// Detach the existing signatures from the input if any, so that we don't sign the signature\n//let originalSignature = input.signature;\n//input.signature = \"\";\n// Detach the existing signatures from the input if any, so that we don't sign the signature\nfor(var i=0;i<this.inputs.length;i++){var input=this.inputs[i];sigz[i]=input.signature;input.signature=\"\";}var encodedChainID=RLP.encode(Bytes.fromString(chainID));var encodedTxType=RLP.encode(Bytes.fromNumber(this.getType()));var encodedTx=RLP.encode(this.rlpInput());var payload=encodedChainID+encodedTxType.slice(2)+encodedTx.slice(2);// For ethereum tx compatibility, encode the tx as the payload\nvar ethTxWrapper=new EthereumTx(payload);var signedBytes=RLP.encode(ethTxWrapper.rlpInput());// the signBytes conforms to the Ethereum raw tx format\nconsole.log(\"SendTx :: signBytes :: txRawBytes = \"+signedBytes);// Attach the original signature back to the inputs\n//input.signature = originalSignature;\n// Attach the original signature back to the inputs\nfor(var j=0;j<this.inputs.length;j++){var _input=this.inputs[j];_input.signature=sigz[j];}return signedBytes;}},{key:\"getType\",value:function getType(){return TxType.TxTypeSend;}},{key:\"rlpInput\",value:function rlpInput(){var numInputs=this.inputs.length;var numOutputs=this.outputs.length;var inputBytesArray=[];var outputBytesArray=[];for(var i=0;i<numInputs;i++){inputBytesArray[i]=this.inputs[i].rlpInput();}for(var _i=0;_i<numOutputs;_i++){outputBytesArray[_i]=this.outputs[_i].rlpInput();}var rlpInput=[this.fee.rlpInput(),inputBytesArray,outputBytesArray];return rlpInput;}}]);return SendTx;}(Tx);var StakePurposes={StakeForValidator:0,StakeForSentry:1,StakeForEliteEdge:2};var StakeTx=/*#__PURE__*/function(_Tx2){_inherits(StakeTx,_Tx2);var _super2=_createSuper(StakeTx);function StakeTx(){_classCallCheck(this,StakeTx);return _super2.apply(this,arguments);}return _createClass(StakeTx);}(Tx);var DepositStakeTx=/*#__PURE__*/function(_StakeTx){_inherits(DepositStakeTx,_StakeTx);var _super3=_createSuper(DepositStakeTx);function DepositStakeTx(source,holderAddress,stakeInDneroWei,feeInDTokenWei,purpose,senderSequence){var _this2;_classCallCheck(this,DepositStakeTx);_this2=_super3.call(this);var feeInDTokenWeiBN=BigNumber.isBigNumber(feeInDTokenWei)?feeInDTokenWei:new BigNumber(feeInDTokenWei);_this2.fee=new Coins(new BigNumber(0),feeInDTokenWeiBN);var stakeInDneroWeiBN=BigNumber.isBigNumber(stakeInDneroWei)?stakeInDneroWei:new BigNumber(stakeInDneroWei);_this2.source=new TxInput(source,stakeInDneroWeiBN,null,senderSequence);_this2.purpose=purpose;//Parse out the info from the holder (summary) param\nif(!holderAddress.startsWith('0x')){holderAddress=\"0x\"+holderAddress;}//Ensure correct size\nif(holderAddress.length!==42){//TODO: throw error\nconsole.log(\"Holder must be a valid address\");}_this2.holder=new TxOutput(holderAddress,null,null);return _this2;}_createClass(DepositStakeTx,[{key:\"setSignature\",value:function setSignature(signature){var input=this.source;input.setSignature(signature);}},{key:\"signBytes\",value:function signBytes(chainID){// Detach the existing signature from the source if any, so that we don't sign the signature\nvar sig=this.source.signature;this.source.signature=\"\";var encodedChainID=RLP.encode(Bytes.fromString(chainID));var encodedTxType=RLP.encode(Bytes.fromNumber(this.getType()));var encodedTx=RLP.encode(this.rlpInput());var payload=encodedChainID+encodedTxType.slice(2)+encodedTx.slice(2);// For ethereum tx compatibility, encode the tx as the payload\nvar ethTxWrapper=new EthereumTx(payload);var signedBytes=RLP.encode(ethTxWrapper.rlpInput());// the signBytes conforms to the Ethereum raw tx format\n// Attach the original signature back to the source\nthis.source.signature=sig;return signedBytes;}},{key:\"getType\",value:function getType(){return TxType.TxTypeDepositStake;}},{key:\"rlpInput\",value:function rlpInput(){var rlpInput=[this.fee.rlpInput(),this.source.rlpInput(),this.holder.rlpInput(),this.purpose===0?Bytes.fromNat(\"0x0\"):Bytes.fromNumber(this.purpose)];return rlpInput;}}]);return DepositStakeTx;}(StakeTx);var DepositStakeV2Tx=/*#__PURE__*/function(_StakeTx2){_inherits(DepositStakeV2Tx,_StakeTx2);var _super4=_createSuper(DepositStakeV2Tx);function DepositStakeV2Tx(source,holderSummary,amount,feeInDTokenWei,purpose,senderSequence){var _this3;_classCallCheck(this,DepositStakeV2Tx);_this3=_super4.call(this);var feeInDTokenWeiBN=BigNumber.isBigNumber(feeInDTokenWei)?feeInDTokenWei:new BigNumber(feeInDTokenWei);_this3.fee=new Coins(new BigNumber(0),feeInDTokenWeiBN);var stakeInWeiBN=BigNumber.isBigNumber(amount)?amount:new BigNumber(amount);if(purpose===StakePurposes.StakeForEliteEdge){// DTOKEN staking\n_this3.source=new TxInput(source,null,stakeInWeiBN,senderSequence);}else{// DNERO staking\n_this3.source=new TxInput(source,stakeInWeiBN,null,senderSequence);}_this3.purpose=purpose;//Parse out the info from the holder (summary) param\nif(!holderSummary.startsWith('0x')){holderSummary=\"0x\"+holderSummary;}//Ensure correct size\nif(!DepositStakeV2Tx.isValidHolderSummary(purpose,holderSummary)){//TODO: throw error\nconsole.log(\"Holder must be a valid node summary\");}//let sentryKeyBytes = Bytes.fromString(holderSummary);\nvar nodeKeyBytes=Bytes.toArray(holderSummary);//slice instead of subarray\nvar holderAddressBytes=nodeKeyBytes.slice(0,20);_this3.blsPubkeyBytes=nodeKeyBytes.slice(20,68);_this3.blsPopBytes=nodeKeyBytes.slice(68,164);_this3.holderSigBytes=nodeKeyBytes.slice(164,229);var holderAddress=Bytes.fromArray(holderAddressBytes);_this3.holder=new TxOutput(holderAddress,null,null);return _this3;}_createClass(DepositStakeV2Tx,[{key:\"setSignature\",value:function setSignature(signature){var input=this.source;input.setSignature(signature);}},{key:\"signBytes\",value:function signBytes(chainID){// Detach the existing signature from the source if any, so that we don't sign the signature\nvar sig=this.source.signature;this.source.signature=\"\";var encodedChainID=RLP.encode(Bytes.fromString(chainID));var encodedTxType=RLP.encode(Bytes.fromNumber(this.getType()));var encodedTx=RLP.encode(this.rlpInput());var payload=encodedChainID+encodedTxType.slice(2)+encodedTx.slice(2);// For ethereum tx compatibility, encode the tx as the payload\nvar ethTxWrapper=new EthereumTx(payload);var signedBytes=RLP.encode(ethTxWrapper.rlpInput());// the signBytes conforms to the Ethereum raw tx format\n// Attach the original signature back to the source\nthis.source.signature=sig;return signedBytes;}},{key:\"getType\",value:function getType(){return TxType.TxTypeDepositStakeV2;}},{key:\"rlpInput\",value:function rlpInput(){var rlpInput=[this.fee.rlpInput(),this.source.rlpInput(),this.holder.rlpInput(),Bytes.fromNumber(this.purpose),Bytes.fromArray(this.blsPubkeyBytes),Bytes.fromArray(this.blsPopBytes),Bytes.fromArray(this.holderSigBytes)];return rlpInput;}}],[{key:\"isValidHolderSummary\",value:function isValidHolderSummary(purpose,holderSummary){if(holderSummary){var summary=holderSummary;if(!holderSummary.startsWith('0x')){summary=\"0x\"+holderSummary;}var expectedLen=460;// Sentry Nodes\nif(purpose===StakePurposes.StakeForEliteEdge){expectedLen=524;}return summary.length===expectedLen;}else{return false;}}}]);return DepositStakeV2Tx;}(StakeTx);var WithdrawStakeTx=/*#__PURE__*/function(_StakeTx3){_inherits(WithdrawStakeTx,_StakeTx3);var _super5=_createSuper(WithdrawStakeTx);function WithdrawStakeTx(source,holder,feeInDTokenWei,purpose,senderSequence){var _this4;_classCallCheck(this,WithdrawStakeTx);_this4=_super5.call(this);var feeInDTokenWeiBN=BigNumber.isBigNumber(feeInDTokenWei)?feeInDTokenWei:new BigNumber(feeInDTokenWei);_this4.fee=new Coins(new BigNumber(0),feeInDTokenWeiBN);_this4.source=new TxInput(source,null,null,senderSequence);_this4.holder=new TxOutput(holder,null,null);_this4.purpose=purpose;return _this4;}_createClass(WithdrawStakeTx,[{key:\"setSignature\",value:function setSignature(signature){var input=this.source;input.setSignature(signature);}},{key:\"signBytes\",value:function signBytes(chainID){// Detach the existing signature from the source if any, so that we don't sign the signature\nvar sig=this.source.signature;this.source.signature=\"\";var encodedChainID=RLP.encode(Bytes.fromString(chainID));var encodedTxType=RLP.encode(Bytes.fromNumber(this.getType()));var encodedTx=RLP.encode(this.rlpInput());var payload=encodedChainID+encodedTxType.slice(2)+encodedTx.slice(2);// For ethereum tx compatibility, encode the tx as the payload\nvar ethTxWrapper=new EthereumTx(payload);var signedBytes=RLP.encode(ethTxWrapper.rlpInput());// the signBytes conforms to the Ethereum raw tx format\nconsole.log(\"SendTx :: signBytes :: txRawBytes = \"+signedBytes);// Attach the original signature back to the source\nthis.source.signature=sig;return signedBytes;}},{key:\"getType\",value:function getType(){return TxType.TxTypeWithdrawStake;}},{key:\"rlpInput\",value:function rlpInput(){var rlpInput=[this.fee.rlpInput(),this.source.rlpInput(),this.holder.rlpInput(),this.purpose===0?Bytes.fromNat(\"0x0\"):Bytes.fromNumber(this.purpose)];return rlpInput;}}]);return WithdrawStakeTx;}(StakeTx);var elliptic=window.elliptic||require(\"elliptic\");var secp256k1=new elliptic.ec(\"secp256k1\");// eslint-disable-line\nvar SHA3_NULL_S='0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';var sha3=function sha3(value){if(isHexStrict(value)&&/^0x/i.test(value.toString())){value=hexToBytes(value);}var returnValue=Hash.keccak256(value);// jshint ignore:line\nif(returnValue===SHA3_NULL_S){return null;}else{return returnValue;}};var encodeSignature=function encodeSignature(_ref){var _ref2=_slicedToArray(_ref,3),v=_ref2[0],r=_ref2[1],s=_ref2[2];return Bytes.flatten([r,s,v]);};var makeSigner=function makeSigner(addToV){return function(hash,privateKey){var ecKey=secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2),\"hex\"));var signature=ecKey.sign(new Buffer(hash.slice(2),\"hex\"),{canonical:true});return encodeSignature([bnFromString(Bytes.fromNumber(addToV+signature.recoveryParam)),Bytes.pad(32,Bytes.fromNat(\"0x\"+signature.r.toString(16))),Bytes.pad(32,Bytes.fromNat(\"0x\"+signature.s.toString(16)))]);};};var sign=makeSigner(0);var TxSigner=/*#__PURE__*/function(){function TxSigner(){_classCallCheck(this,TxSigner);}_createClass(TxSigner,null,[{key:\"signAndSerializeTx\",value:function signAndSerializeTx(chainID,tx,privateKey){var signedTx=this.signTx(chainID,tx,privateKey);var signedRawBytes=this.serializeTx(signedTx);return signedRawBytes;}},{key:\"signTx\",value:function signTx(chainID,tx,privateKey){var txRawBytes=tx.signBytes(chainID);var txHash=sha3(txRawBytes);var signature=sign(txHash,privateKey);tx.setSignature(signature);return tx;}},{key:\"serializeTx\",value:function serializeTx(tx){var encodedTxType=RLP.encode(Bytes.fromNumber(tx.getType()));var encodedTx=RLP.encode(tx.rlpInput());// this time encode with signature\nvar signedRawBytes=encodedTxType+encodedTx.slice(2);return signedRawBytes;}}]);return TxSigner;}();var Web3Utils=require('web3-utils');var SmartContractTx=/*#__PURE__*/function(_Tx3){_inherits(SmartContractTx,_Tx3);var _super6=_createSuper(SmartContractTx);function SmartContractTx(fromAddress,toAddress,gasLimit,gasPrice,data,value,senderSequence){var _this5;_classCallCheck(this,SmartContractTx);_this5=_super6.call(this);var valueWeiBN=BigNumber.isBigNumber(value)?value:new BigNumber(value);_this5.from=new TxInput(fromAddress,null,valueWeiBN,senderSequence);_this5.to=new TxOutput(toAddress,null,null);_this5.gasLimit=gasLimit;_this5.gasPrice=gasPrice;if(data.toLowerCase().startsWith(\"0x\")===false){data=\"0x\"+data;}_this5.data=Bytes.toArray(data);return _this5;}_createClass(SmartContractTx,[{key:\"setSignature\",value:function setSignature(signature){var input=this.from;input.setSignature(signature);}},{key:\"signBytes\",value:function signBytes(chainID){// Detach the existing signature from the source if any, so that we don't sign the signature\nvar sig=this.from.signature;this.from.signature=\"\";var encodedChainID=RLP.encode(Bytes.fromString(chainID));var encodedTxType=RLP.encode(Bytes.fromNumber(this.getType()));var encodedTx=RLP.encode(this.rlpInput());var payload=encodedChainID+encodedTxType.slice(2)+encodedTx.slice(2);// For ethereum tx compatibility, encode the tx as the payload\nvar ethTxWrapper=new EthereumTx(payload);var signedBytes=RLP.encode(ethTxWrapper.rlpInput());// the signBytes conforms to the Ethereum raw tx format\n// Attach the original signature back to the source\nthis.from.signature=sig;return signedBytes;}},{key:\"getType\",value:function getType(){return TxType.TxTypeSmartContract;}},{key:\"rlpInput\",value:function rlpInput(){var rlpInput=[this.from.rlpInput(),this.to.rlpInput(),Bytes.fromNumber(this.gasLimit),encodeWei(this.gasPrice),Bytes.fromArray(this.data)];return rlpInput;}}]);return SmartContractTx;}(Tx);var index={SendTx:SendTx,DepositStakeTx:DepositStakeTx,DepositStakeV2Tx:DepositStakeV2Tx,WithdrawStakeTx:WithdrawStakeTx,SmartContractTx:SmartContractTx,TxSigner:TxSigner,StakePurposes:StakePurposes,Utils:{hexToBytes:hexToBytes,bytesToHex:bytesToHex}};export default index;","map":{"version":3,"names":["isString","isNumber","BigNumber","Bytes","RLP","Hash","Tx","chainID","isHexStrict","hex","test","hexToBytes","toString","Error","replace","length","bytes","c","push","parseInt","substr","bytesToHex","i","join","prototype","pad","size","s","String","bnFromString","str","base","slice","bigNum","bigNumWithPad","encodeWei","wei","undefined","fromNat","isEqualTo","fromNumber","Coins","dneroWei","dtokenWei","rlpInput","TxInput","address","sequence","signature","coins","toLowerCase","rplInput","TxOutput","TxType","TxTypeCoinbase","TxTypeSlash","TxTypeSend","TxTypeReserveFund","TxTypeReleaseFund","TxTypeServicePayment","TxTypeSplitRule","TxTypeSmartContract","TxTypeDepositStake","TxTypeWithdrawStake","TxTypeDepositStakeV2","EthereumTx","payload","nonce","gasPrice","gas","to","value","input","SendTx","senderAddr","outputs","feeInDTokenWei","senderSequence","totalDneroWeiBN","totalDtokenWeiBN","feeInDTokenWeiBN","isBigNumber","output","dneroWeiBN","dtokenWeiBN","plus","fee","txInput","inputs","j","txOutput","setSignature","sigz","encodedChainID","encode","fromString","encodedTxType","getType","encodedTx","ethTxWrapper","signedBytes","console","log","numInputs","numOutputs","inputBytesArray","outputBytesArray","StakePurposes","StakeForValidator","StakeForSentry","StakeForEliteEdge","StakeTx","DepositStakeTx","source","holderAddress","stakeInDneroWei","purpose","stakeInDneroWeiBN","startsWith","holder","sig","DepositStakeV2Tx","holderSummary","amount","stakeInWeiBN","isValidHolderSummary","nodeKeyBytes","toArray","holderAddressBytes","blsPubkeyBytes","blsPopBytes","holderSigBytes","fromArray","summary","expectedLen","WithdrawStakeTx","elliptic","window","require","secp256k1","ec","SHA3_NULL_S","sha3","returnValue","keccak256","encodeSignature","v","r","flatten","makeSigner","addToV","hash","privateKey","ecKey","keyFromPrivate","Buffer","sign","canonical","recoveryParam","TxSigner","tx","signedTx","signTx","signedRawBytes","serializeTx","txRawBytes","signBytes","txHash","Web3Utils","SmartContractTx","fromAddress","toAddress","gasLimit","data","valueWeiBN","from","index","Utils"],"sources":["/Users/jjestrella/DNERO_Protocol/dnerowebwallet/src/libs/dnerojs.esm.js"],"sourcesContent":["import isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport BigNumber from 'bignumber.js';\nimport Bytes from 'eth-lib/lib/bytes';\nimport RLP from 'eth-lib/lib/rlp';\nimport Hash from 'eth-lib/lib/hash';\n\nclass Tx{\n    constructor(){\n\n    }\n\n    signBytes(chainID){\n\n    }\n\n    getType(){\n\n    }\n\n    rlpInput(){\n\n    }\n}\n\n// /**\n//  * Check if string is HEX, requires a 0x in front\n//  *\n//  * @method isHexStrict\n//  *\n//  * @param {String} hex to be checked\n//  *\n//  * @returns {Boolean}\n//  */\nconst isHexStrict = (hex) => {\n    return (isString(hex) || isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n *\n * @param {String} hex\n *\n * @returns {Array} the byte array\n */\nconst hexToBytes = (hex) => {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error(`Given value \"${hex}\" is not a valid hex string.`);\n    }\n\n    hex = hex.replace(/^0x/i, '');\n    hex = hex.length % 2 ? '0' + hex : hex;\n\n    let bytes = [];\n    for (let c = 0; c < hex.length; c += 2) {\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    }\n\n    return bytes;\n};\n\n// Convert a byte array to a hex string\nconst bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n    }\n    return hex.join(\"\");\n};\n\nBigNumber.prototype.pad = function(size) {\n    var s = String(this);\n    while (s.length < (size || 2)) {s = \"0\" + s;}\n    return s;\n};\n\nconst bnFromString = str => {\n    const base = str.slice(0, 2) === \"0x\" ? 16 : 10;\n    const bigNum = new BigNumber(str, base);\n    const bigNumWithPad = \"0x\" + bigNum.pad(2);\n    return bigNumWithPad; // Jieyi: return \"0x00\" instead of \"0x\" to be compatible with the Golang/Java signature\n};\n\nconst encodeWei = (wei) =>{\n    if(wei === null || wei === undefined){\n        return Bytes.fromNat(\"0x0\");\n    }\n    else if(wei.isEqualTo(new BigNumber(0))){\n        return Bytes.fromNat(\"0x0\");\n    }\n    else{\n        return Bytes.fromNumber(wei);\n    }\n};\n\nclass Coins{\n    constructor(dneroWei, dtokenWei){\n        this.dneroWei = dneroWei;\n        this.dtokenWei = dtokenWei;\n    }\n\n    // encodeWei(wei){\n    //     if(wei === null || wei === undefined){\n    //         return Bytes.fromNat(\"0x0\");\n    //     }\n    //     else if(wei.isEqualTo(new BigNumber(0))){\n    //         return Bytes.fromNat(\"0x0\");\n    //     }\n    //     else{\n    //         return Bytes.fromNumber(wei);\n    //     }\n    // }\n\n    rlpInput(){\n\n        let rlpInput = [\n            encodeWei(this.dneroWei),\n            encodeWei(this.dtokenWei),\n            //(this.dneroWei.isEqualTo(new BigNumber(0))) ? Bytes.fromNat(\"0x0\") : Bytes.fromNumber(this.dneroWei),\n            //(this.dtokenWei.isEqualTo(new BigNumber(0))) ? Bytes.fromNat(\"0x0\") : Bytes.fromNumber(this.dtokenWei)\n        ];\n\n        return rlpInput;\n    }\n}\n\nclass TxInput{\n    constructor(address, dneroWei, dtokenWei, sequence) {\n        this.address = address;\n        this.sequence = sequence;\n        this.signature = \"\";\n\n        if(dneroWei || dtokenWei){\n            this.coins = new Coins(dneroWei, dtokenWei);\n        }\n        else{\n            //TODO should this be undefined or null?\n            this.coins = new Coins(null, null);\n        }\n    }\n\n    setSignature(signature) {\n        this.signature = signature;\n    }\n\n    rlpInput(){\n        let address = null;\n\n        if(this.address){\n            address = this.address.toLowerCase();\n        }\n        else{\n            address = Bytes.fromNat(\"0x0\");\n        }\n\n        let rplInput = [\n            address,\n            this.coins.rlpInput(),\n            Bytes.fromNumber(this.sequence),\n            this.signature\n        ];\n\n        return rplInput;\n    }\n}\n\nclass TxOutput {\n    constructor(address, dneroWei, dtokenWei) {\n        this.address = address;\n\n        if(dneroWei || dtokenWei){\n            this.coins = new Coins(dneroWei, dtokenWei);\n        }\n        else{\n            //TODO should this be undefined or null?\n            this.coins = new Coins(null, null);\n        }\n    }\n\n    rlpInput(){\n        let address = null;\n\n        if(this.address){\n            address = this.address.toLowerCase();\n        }\n        else{\n            //Empty address\n            address = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        let rplInput = [\n            address,\n            this.coins.rlpInput()\n        ];\n\n        return rplInput;\n    }\n}\n\nconst TxType = {\n    TxTypeCoinbase: 0,\n    TxTypeSlash: 1,\n    TxTypeSend: 2,\n    TxTypeReserveFund: 3,\n    TxTypeReleaseFund: 4,\n    TxTypeServicePayment: 5,\n    TxTypeSplitRule: 6,\n    TxTypeSmartContract: 7,\n    TxTypeDepositStake: 8,\n    TxTypeWithdrawStake: 9,\n    TxTypeDepositStakeV2: 10,\n};\n\nclass EthereumTx{\n    constructor(payload){\n        this.nonce = \"0x0\";\n        this.gasPrice = \"0x0\";\n        this.gas = \"0x0\";\n        this.to = \"0x0000000000000000000000000000000000000000\";\n        this.value = \"0x0\";\n        this.input = payload;\n    }\n\n    rlpInput() {\n        let rplInput= [\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.input,\n        ];\n\n        return rplInput;\n    }\n}\n\nclass SendTx extends Tx{\n    constructor(senderAddr, outputs, feeInDTokenWei, senderSequence){\n        super();\n\n        let totalDneroWeiBN = new BigNumber(0);\n        let totalDtokenWeiBN = new BigNumber(0);\n        let feeInDTokenWeiBN = BigNumber.isBigNumber(feeInDTokenWei) ? feeInDTokenWei : (new BigNumber(feeInDTokenWei));\n\n        for(var i = 0; i < outputs.length; i++){\n            let output = outputs[i];\n            let dneroWei = output.dneroWei;\n            let dtokenWei = output.dtokenWei;\n\n            let dneroWeiBN = BigNumber.isBigNumber(dneroWei) ? dneroWei : (new BigNumber(dneroWei));\n            let dtokenWeiBN = BigNumber.isBigNumber(dtokenWei) ? dtokenWei : (new BigNumber(dtokenWei));\n\n            totalDneroWeiBN = totalDneroWeiBN.plus(dneroWeiBN);\n            totalDtokenWeiBN = totalDtokenWeiBN.plus(dtokenWeiBN);\n        }\n\n        this.fee = new Coins(new BigNumber(0), feeInDTokenWeiBN);\n\n        let txInput = new TxInput(senderAddr, totalDneroWeiBN, totalDtokenWeiBN.plus(feeInDTokenWeiBN), senderSequence);\n        this.inputs = [txInput];\n\n        this.outputs = [];\n        for(var j = 0; j < outputs.length; j++){\n            let output = outputs[j];\n            let address = output.address;\n            let dneroWei = output.dneroWei;\n            let dtokenWei = output.dtokenWei;\n\n            let dneroWeiBN = BigNumber.isBigNumber(dneroWei) ? dneroWei : (new BigNumber(dneroWei));\n            let dtokenWeiBN = BigNumber.isBigNumber(dtokenWei) ? dtokenWei : (new BigNumber(dtokenWei));\n\n            let txOutput = new TxOutput(address, dneroWeiBN, dtokenWeiBN);\n\n            this.outputs.push(txOutput);\n        }\n    }\n\n    setSignature(signature){\n        //TODO support multiple inputs\n        let input = this.inputs[0];\n        input.setSignature(signature);\n    }\n\n    signBytes(chainID){\n        let sigz = [];\n        //let input = this.inputs[0];\n\n        // Detach the existing signatures from the input if any, so that we don't sign the signature\n        //let originalSignature = input.signature;\n        //input.signature = \"\";\n\n        // Detach the existing signatures from the input if any, so that we don't sign the signature\n        for(var i = 0; i < this.inputs.length; i++){\n            let input = this.inputs[i];\n\n            sigz[i] = input.signature;\n            input.signature = \"\";\n        }\n\n        let encodedChainID = RLP.encode(Bytes.fromString(chainID));\n        let encodedTxType = RLP.encode(Bytes.fromNumber(this.getType()));\n        let encodedTx = RLP.encode(this.rlpInput());\n        let payload = encodedChainID + encodedTxType.slice(2) + encodedTx.slice(2);\n\n        // For ethereum tx compatibility, encode the tx as the payload\n        let ethTxWrapper = new EthereumTx(payload);\n        let signedBytes = RLP.encode(ethTxWrapper.rlpInput()); // the signBytes conforms to the Ethereum raw tx format\n\n        console.log(\"SendTx :: signBytes :: txRawBytes = \" + signedBytes);\n\n        // Attach the original signature back to the inputs\n        //input.signature = originalSignature;\n\n        // Attach the original signature back to the inputs\n        for(var j = 0; j < this.inputs.length; j++){\n            let input = this.inputs[j];\n\n            input.signature = sigz[j];\n        }\n\n        return signedBytes;\n    }\n\n    getType(){\n        return TxType.TxTypeSend;\n    }\n\n    rlpInput(){\n        let numInputs = this.inputs.length;\n        let numOutputs = this.outputs.length;\n        let inputBytesArray = [];\n        let outputBytesArray = [];\n\n        for(let i = 0; i < numInputs; i ++) {\n            inputBytesArray[i] = this.inputs[i].rlpInput();\n        }\n\n        for (let i = 0; i < numOutputs; i ++) {\n            outputBytesArray[i] = this.outputs[i].rlpInput();\n        }\n\n        let rlpInput = [\n            this.fee.rlpInput(),\n            inputBytesArray,\n            outputBytesArray\n        ];\n\n        return rlpInput;\n    }\n}\n\nconst StakePurposes = {\n    StakeForValidator: 0,\n    StakeForSentry: 1,\n    StakeForEliteEdge: 2\n};\n\nclass StakeTx extends Tx{\n\n}\n\nclass DepositStakeTx extends StakeTx{\n    constructor(source, holderAddress, stakeInDneroWei, feeInDTokenWei, purpose, senderSequence){\n        super();\n\n        let feeInDTokenWeiBN = BigNumber.isBigNumber(feeInDTokenWei) ? feeInDTokenWei : (new BigNumber(feeInDTokenWei));\n        this.fee = new Coins(new BigNumber(0), feeInDTokenWeiBN);\n\n        let stakeInDneroWeiBN = BigNumber.isBigNumber(stakeInDneroWei) ? stakeInDneroWei : (new BigNumber(stakeInDneroWei));\n        this.source = new TxInput(source, stakeInDneroWeiBN, null, senderSequence);\n\n        this.purpose = purpose;\n\n        //Parse out the info from the holder (summary) param\n        if(!holderAddress.startsWith('0x')){\n            holderAddress = \"0x\" + holderAddress;\n        }\n\n        //Ensure correct size\n        if(holderAddress.length !== 42) {\n            //TODO: throw error\n            console.log(\"Holder must be a valid address\");\n        }\n\n        this.holder = new TxOutput(holderAddress, null, null);\n    }\n\n    setSignature(signature){\n        let input = this.source;\n        input.setSignature(signature);\n    }\n\n    signBytes(chainID){\n        // Detach the existing signature from the source if any, so that we don't sign the signature\n        let sig = this.source.signature;\n\n        this.source.signature = \"\";\n\n        let encodedChainID = RLP.encode(Bytes.fromString(chainID));\n        let encodedTxType = RLP.encode(Bytes.fromNumber(this.getType()));\n        let encodedTx = RLP.encode(this.rlpInput());\n        let payload = encodedChainID + encodedTxType.slice(2) + encodedTx.slice(2);\n\n        // For ethereum tx compatibility, encode the tx as the payload\n        let ethTxWrapper = new EthereumTx(payload);\n        let signedBytes = RLP.encode(ethTxWrapper.rlpInput()); // the signBytes conforms to the Ethereum raw tx format\n\n        // Attach the original signature back to the source\n        this.source.signature = sig;\n\n        return signedBytes;\n    }\n\n    getType(){\n        return TxType.TxTypeDepositStake;\n    }\n\n    rlpInput(){\n        let rlpInput = [\n            this.fee.rlpInput(),\n            this.source.rlpInput(),\n            this.holder.rlpInput(),\n\n            (this.purpose === 0 ? Bytes.fromNat(\"0x0\") : Bytes.fromNumber(this.purpose)),\n        ];\n\n        return rlpInput;\n    }\n}\n\nclass DepositStakeV2Tx extends StakeTx{\n    static isValidHolderSummary(purpose, holderSummary){\n        if(holderSummary){\n            let summary = holderSummary;\n            if(!holderSummary.startsWith('0x')){\n                summary = \"0x\" + holderSummary;\n            }\n\n            let expectedLen = 460; // Sentry Nodes\n            if(purpose === StakePurposes.StakeForEliteEdge){\n                expectedLen = 524;\n            }\n\n            return (summary.length === expectedLen);\n        }\n        else{\n            return false;\n        }\n    }\n\n    constructor(source, holderSummary, amount, feeInDTokenWei, purpose, senderSequence){\n        super();\n\n        let feeInDTokenWeiBN = BigNumber.isBigNumber(feeInDTokenWei) ? feeInDTokenWei : (new BigNumber(feeInDTokenWei));\n        this.fee = new Coins(new BigNumber(0), feeInDTokenWeiBN);\n\n        let stakeInWeiBN = BigNumber.isBigNumber(amount) ? amount : (new BigNumber(amount));\n\n        if(purpose === StakePurposes.StakeForEliteEdge){\n            // DTOKEN staking\n            this.source = new TxInput(source, null, stakeInWeiBN, senderSequence);\n        }\n        else{\n            // DNERO staking\n            this.source = new TxInput(source, stakeInWeiBN, null, senderSequence);\n        }\n\n        this.purpose = purpose;\n\n        //Parse out the info from the holder (summary) param\n        if(!holderSummary.startsWith('0x')){\n            holderSummary = \"0x\" + holderSummary;\n        }\n\n        //Ensure correct size\n        if(!DepositStakeV2Tx.isValidHolderSummary(purpose, holderSummary)) {\n            //TODO: throw error\n            console.log(\"Holder must be a valid node summary\");\n        }\n\n        //let sentryKeyBytes = Bytes.fromString(holderSummary);\n        let nodeKeyBytes = Bytes.toArray(holderSummary);\n\n        //slice instead of subarray\n        let holderAddressBytes = nodeKeyBytes.slice(0, 20);\n\n        this.blsPubkeyBytes = nodeKeyBytes.slice(20, 68);\n        this.blsPopBytes = nodeKeyBytes.slice(68, 164);\n        this.holderSigBytes = nodeKeyBytes.slice(164, 229);\n\n        let holderAddress = Bytes.fromArray(holderAddressBytes);\n\n        this.holder = new TxOutput(holderAddress, null, null);\n    }\n\n    setSignature(signature){\n        let input = this.source;\n        input.setSignature(signature);\n    }\n\n    signBytes(chainID){\n        // Detach the existing signature from the source if any, so that we don't sign the signature\n        let sig = this.source.signature;\n\n\n        this.source.signature = \"\";\n\n        let encodedChainID = RLP.encode(Bytes.fromString(chainID));\n        let encodedTxType = RLP.encode(Bytes.fromNumber(this.getType()));\n        let encodedTx = RLP.encode(this.rlpInput());\n        let payload = encodedChainID + encodedTxType.slice(2) + encodedTx.slice(2);\n\n        // For ethereum tx compatibility, encode the tx as the payload\n        let ethTxWrapper = new EthereumTx(payload);\n        let signedBytes = RLP.encode(ethTxWrapper.rlpInput()); // the signBytes conforms to the Ethereum raw tx format\n\n        // Attach the original signature back to the source\n        this.source.signature = sig;\n\n        return signedBytes;\n    }\n\n    getType(){\n        return TxType.TxTypeDepositStakeV2;\n    }\n\n    rlpInput(){\n        let rlpInput = [\n            this.fee.rlpInput(),\n            this.source.rlpInput(),\n            this.holder.rlpInput(),\n\n            Bytes.fromNumber(this.purpose),\n\n            Bytes.fromArray(this.blsPubkeyBytes),\n            Bytes.fromArray(this.blsPopBytes),\n            Bytes.fromArray(this.holderSigBytes)\n        ];\n\n        return rlpInput;\n    }\n}\n\nclass WithdrawStakeTx extends StakeTx{\n    constructor(source, holder, feeInDTokenWei, purpose, senderSequence){\n        super();\n\n        let feeInDTokenWeiBN = BigNumber.isBigNumber(feeInDTokenWei) ? feeInDTokenWei : (new BigNumber(feeInDTokenWei));\n        this.fee = new Coins(new BigNumber(0), feeInDTokenWeiBN);\n\n        this.source = new TxInput(source, null, null, senderSequence);\n\n        this.holder = new TxOutput(holder, null, null);\n\n        this.purpose = purpose;\n    }\n\n    setSignature(signature){\n        let input = this.source;\n        input.setSignature(signature);\n    }\n\n    signBytes(chainID){\n        // Detach the existing signature from the source if any, so that we don't sign the signature\n        let sig = this.source.signature;\n        this.source.signature = \"\";\n\n        let encodedChainID = RLP.encode(Bytes.fromString(chainID));\n        let encodedTxType = RLP.encode(Bytes.fromNumber(this.getType()));\n        let encodedTx = RLP.encode(this.rlpInput());\n        let payload = encodedChainID + encodedTxType.slice(2) + encodedTx.slice(2);\n\n        // For ethereum tx compatibility, encode the tx as the payload\n        let ethTxWrapper = new EthereumTx(payload);\n        let signedBytes = RLP.encode(ethTxWrapper.rlpInput()); // the signBytes conforms to the Ethereum raw tx format\n\n        console.log(\"SendTx :: signBytes :: txRawBytes = \" + signedBytes);\n\n        // Attach the original signature back to the source\n        this.source.signature = sig;\n\n        return signedBytes;\n    }\n\n    getType(){\n        return TxType.TxTypeWithdrawStake;\n    }\n\n    rlpInput(){\n        let rlpInput = [\n            this.fee.rlpInput(),\n            this.source.rlpInput(),\n            this.holder.rlpInput(),\n\n            (this.purpose === 0 ? Bytes.fromNat(\"0x0\") : Bytes.fromNumber(this.purpose)),\n        ];\n\n        return rlpInput;\n    }\n}\n\nconst elliptic = (window.elliptic || require(\"elliptic\"));\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nconst SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nconst sha3 = (value) => {\n    if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n        value = hexToBytes(value);\n    }\n\n    const returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if (returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n\nconst encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);\n\nconst makeSigner = addToV => (hash, privateKey) => {\n  const ecKey = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\"));\n  const signature = ecKey.sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n  return encodeSignature([\n      bnFromString(Bytes.fromNumber(addToV + signature.recoveryParam)),\n      Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))),\n      Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))\n    ]);\n};\n\nconst sign = makeSigner(0);\n\nclass TxSigner {\n\n    static signAndSerializeTx(chainID, tx, privateKey) {\n        let signedTx = this.signTx(chainID, tx, privateKey);\n        let signedRawBytes = this.serializeTx(signedTx);\n\n        return signedRawBytes;\n    }\n\n    static signTx(chainID, tx, privateKey) {\n        let txRawBytes = tx.signBytes(chainID);\n        let txHash = sha3(txRawBytes);\n        let signature = sign(txHash, privateKey);\n        tx.setSignature(signature);\n\n        return tx\n    }\n\n    static serializeTx(tx) {\n        let encodedTxType = RLP.encode(Bytes.fromNumber(tx.getType()));\n        let encodedTx = RLP.encode(tx.rlpInput());// this time encode with signature\n        let signedRawBytes = encodedTxType + encodedTx.slice(2);\n\n        return signedRawBytes;\n    }\n}\n\nvar Web3Utils = require('web3-utils');\n\nclass SmartContractTx extends Tx{\n    constructor(fromAddress, toAddress, gasLimit, gasPrice, data, value, senderSequence){\n        super();\n\n        let valueWeiBN = BigNumber.isBigNumber(value) ? value : (new BigNumber(value));\n\n        this.from = new TxInput(fromAddress, null, valueWeiBN, senderSequence);\n        this.to = new TxOutput(toAddress, null, null);\n\n        this.gasLimit = gasLimit;\n        this.gasPrice = gasPrice;\n\n        if(data.toLowerCase().startsWith(\"0x\") === false){\n            data = \"0x\" + data;\n        }\n\n        this.data = Bytes.toArray(data);\n    }\n\n    setSignature(signature){\n        let input = this.from;\n        input.setSignature(signature);\n    }\n\n    signBytes(chainID){\n        // Detach the existing signature from the source if any, so that we don't sign the signature\n        let sig = this.from.signature;\n\n        this.from.signature = \"\";\n\n        let encodedChainID = RLP.encode(Bytes.fromString(chainID));\n        let encodedTxType = RLP.encode(Bytes.fromNumber(this.getType()));\n        let encodedTx = RLP.encode(this.rlpInput());\n        let payload = encodedChainID + encodedTxType.slice(2) + encodedTx.slice(2);\n\n        // For ethereum tx compatibility, encode the tx as the payload\n        let ethTxWrapper = new EthereumTx(payload);\n        let signedBytes = RLP.encode(ethTxWrapper.rlpInput()); // the signBytes conforms to the Ethereum raw tx format\n\n        // Attach the original signature back to the source\n        this.from.signature = sig;\n\n        return signedBytes;\n    }\n\n    getType(){\n        return TxType.TxTypeSmartContract;\n    }\n\n    rlpInput(){\n        let rlpInput = [\n            this.from.rlpInput(),\n            this.to.rlpInput(),\n\n            Bytes.fromNumber(this.gasLimit),\n            encodeWei(this.gasPrice),\n\n            Bytes.fromArray(this.data)\n        ];\n\n        return rlpInput;\n    }\n}\n\nvar index = {\n    SendTx,\n    DepositStakeTx: DepositStakeTx,\n    DepositStakeV2Tx: DepositStakeV2Tx,\n    WithdrawStakeTx,\n    SmartContractTx,\n    TxSigner,\n    StakePurposes,\n    Utils: {\n        hexToBytes,\n        bytesToHex\n    }\n};\n\nexport default index;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}